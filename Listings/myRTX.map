Component: Arm Compiler for Embedded 6.19 Tool: armlink [5e73cb00]

==============================================================================

Section Cross References

    main.o(.text.runningLedThread) refers to rtx_thread.o(.text.osThreadNew) for osThreadNew
    main.o(.text.runningLedThread) refers to led.o(.text.runningLED) for runningLED
    main.o(.text.runningLedThread) refers to main.o(.rodata.runningled_attr) for runningled_attr
    main.o(.ARM.exidx.text.runningLedThread) refers to main.o(.text.runningLedThread) for [Anonymous Symbol]
    main.o(.text.flashLedStationaryThread) refers to rtx_thread.o(.text.osThreadNew) for osThreadNew
    main.o(.text.flashLedStationaryThread) refers to led.o(.text.flashLEDFast) for flashLEDFast
    main.o(.text.flashLedStationaryThread) refers to main.o(.rodata.flashled_attr1) for flashled_attr1
    main.o(.ARM.exidx.text.flashLedStationaryThread) refers to main.o(.text.flashLedStationaryThread) for [Anonymous Symbol]
    main.o(.text.flashLedMovingThread) refers to rtx_thread.o(.text.osThreadNew) for osThreadNew
    main.o(.text.flashLedMovingThread) refers to led.o(.text.flashLEDSlow) for flashLEDSlow
    main.o(.text.flashLedMovingThread) refers to main.o(.rodata.flashled_attr2) for flashled_attr2
    main.o(.ARM.exidx.text.flashLedMovingThread) refers to main.o(.text.flashLedMovingThread) for [Anonymous Symbol]
    main.o(.text.lightAllLedThread) refers to rtx_thread.o(.text.osThreadNew) for osThreadNew
    main.o(.text.lightAllLedThread) refers to led.o(.text.lightAllLED) for lightAllLED
    main.o(.text.lightAllLedThread) refers to main.o(.rodata.allled_attr) for allled_attr
    main.o(.ARM.exidx.text.lightAllLedThread) refers to main.o(.text.lightAllLedThread) for [Anonymous Symbol]
    main.o(.text.run_sound_thread) refers to rtx_evflags.o(.text.osEventFlagsWait) for osEventFlagsWait
    main.o(.text.run_sound_thread) refers to idiv_div0.o(.text) for __aeabi_idiv
    main.o(.text.run_sound_thread) refers to audio.o(.text.freq_calc) for freq_calc
    main.o(.text.run_sound_thread) refers to audio.o(.text.duty_cycle_calc) for duty_cycle_calc
    main.o(.text.run_sound_thread) refers to rtx_delay.o(.text.osDelay) for osDelay
    main.o(.text.run_sound_thread) refers to main.o(.bss.flagRunningSound) for flagRunningSound
    main.o(.text.run_sound_thread) refers to main.o(.data.run_song) for run_song
    main.o(.ARM.exidx.text.run_sound_thread) refers to main.o(.text.run_sound_thread) for [Anonymous Symbol]
    main.o(.text.UART2_IRQHandler) refers to main.o(.text.__NVIC_ClearPendingIRQ) for __NVIC_ClearPendingIRQ
    main.o(.text.UART2_IRQHandler) refers to main.o(.bss.rx_data) for rx_data
    main.o(.ARM.exidx.text.UART2_IRQHandler) refers to main.o(.text.UART2_IRQHandler) for [Anonymous Symbol]
    main.o(.ARM.exidx.text.__NVIC_ClearPendingIRQ) refers to main.o(.text.__NVIC_ClearPendingIRQ) for [Anonymous Symbol]
    main.o(.text.end_sound_thread) refers to rtx_evflags.o(.text.osEventFlagsWait) for osEventFlagsWait
    main.o(.text.end_sound_thread) refers to audio.o(.text.playEndAudio) for playEndAudio
    main.o(.text.end_sound_thread) refers to main.o(.bss.flagEndingSound) for flagEndingSound
    main.o(.ARM.exidx.text.end_sound_thread) refers to main.o(.text.end_sound_thread) for [Anonymous Symbol]
    main.o(.text.control) refers to rtx_evflags.o(.text.osEventFlagsClear) for osEventFlagsClear
    main.o(.text.control) refers to rtx_evflags.o(.text.osEventFlagsSet) for osEventFlagsSet
    main.o(.text.control) refers to motorcontrol.o(.text.forward) for forward
    main.o(.text.control) refers to motorcontrol.o(.text.backward) for backward
    main.o(.text.control) refers to motorcontrol.o(.text.left) for left
    main.o(.text.control) refers to motorcontrol.o(.text.right) for right
    main.o(.text.control) refers to motorcontrol.o(.text.stop) for stop
    main.o(.text.control) refers to motorcontrol.o(.text.rightForward) for rightForward
    main.o(.text.control) refers to motorcontrol.o(.text.leftForward) for leftForward
    main.o(.text.control) refers to motorcontrol.o(.text.rightBackward) for rightBackward
    main.o(.text.control) refers to motorcontrol.o(.text.leftBackward) for leftBackward
    main.o(.text.control) refers to audio.o(.text.stopSound) for stopSound
    main.o(.text.control) refers to main.o(.bss.flagRunning) for flagRunning
    main.o(.text.control) refers to main.o(.bss.flagRunningSound) for flagRunningSound
    main.o(.text.control) refers to main.o(.bss.flagStation) for flagStation
    main.o(.text.control) refers to main.o(.bss.rx_data) for rx_data
    main.o(.text.control) refers to main.o(.bss.flagEndingSound) for flagEndingSound
    main.o(.ARM.exidx.text.control) refers to main.o(.text.control) for [Anonymous Symbol]
    main.o(.text.main) refers to system_mkl25z4.o(.text.SystemCoreClockUpdate) for SystemCoreClockUpdate
    main.o(.text.main) refers to rtx_evflags.o(.text.osEventFlagsNew) for osEventFlagsNew
    main.o(.text.main) refers to audio.o(.text.initAudio) for initAudio
    main.o(.text.main) refers to motorcontrol.o(.text.initMotor) for initMotor
    main.o(.text.main) refers to serial.o(.text.initUART2) for initUART2
    main.o(.text.main) refers to rtx_kernel.o(.text.osKernelInitialize) for osKernelInitialize
    main.o(.text.main) refers to rtx_thread.o(.text.osThreadNew) for osThreadNew
    main.o(.text.main) refers to main.o(.text.runningLedThread) for runningLedThread
    main.o(.text.main) refers to main.o(.text.flashLedStationaryThread) for flashLedStationaryThread
    main.o(.text.main) refers to rtx_kernel.o(.text.osKernelStart) for osKernelStart
    main.o(.text.main) refers to main.o(.bss.flagEndingSound) for flagEndingSound
    main.o(.text.main) refers to main.o(.bss.flagRunningSound) for flagRunningSound
    main.o(.text.main) refers to main.o(.bss.flagFinish) for flagFinish
    main.o(.text.main) refers to main.o(.bss.flagStation) for flagStation
    main.o(.text.main) refers to main.o(.bss.flagRunning) for flagRunning
    main.o(.text.main) refers to main.o(.text.end_sound_thread) for end_sound_thread
    main.o(.text.main) refers to main.o(.text.run_sound_thread) for run_sound_thread
    main.o(.text.main) refers to main.o(.text.control) for control
    main.o(.ARM.exidx.text.main) refers to main.o(.text.main) for [Anonymous Symbol]
    main.o(.rodata.runningled_attr) refers to main.o(.bss.runningled_stk) for [Anonymous Symbol]
    main.o(.rodata.flashled_attr1) refers to main.o(.bss.flashled_stk1) for [Anonymous Symbol]
    main.o(.rodata.flashled_attr2) refers to main.o(.bss.flashled_stk2) for [Anonymous Symbol]
    main.o(.rodata.allled_attr) refers to main.o(.bss.allled_stk) for [Anonymous Symbol]
    motorcontrol.o(.text.pwm_cal) refers to fdiv.o(.text) for __aeabi_fdiv
    motorcontrol.o(.text.pwm_cal) refers to fmul.o(.text) for __aeabi_fmul
    motorcontrol.o(.text.pwm_cal) refers to ffixi.o(.text) for __aeabi_f2iz
    motorcontrol.o(.ARM.exidx.text.pwm_cal) refers to motorcontrol.o(.text.pwm_cal) for [Anonymous Symbol]
    motorcontrol.o(.ARM.exidx.text.parseMove) refers to motorcontrol.o(.text.parseMove) for [Anonymous Symbol]
    motorcontrol.o(.ARM.exidx.text.initMotor) refers to motorcontrol.o(.text.initMotor) for [Anonymous Symbol]
    motorcontrol.o(.text.rightMotorMove) refers to motorcontrol.o(.text.pwm_cal) for pwm_cal
    motorcontrol.o(.ARM.exidx.text.rightMotorMove) refers to motorcontrol.o(.text.rightMotorMove) for [Anonymous Symbol]
    motorcontrol.o(.text.leftMotorMove) refers to motorcontrol.o(.text.pwm_cal) for pwm_cal
    motorcontrol.o(.ARM.exidx.text.leftMotorMove) refers to motorcontrol.o(.text.leftMotorMove) for [Anonymous Symbol]
    motorcontrol.o(.text.forward) refers to motorcontrol.o(.text.rightMotorMove) for rightMotorMove
    motorcontrol.o(.text.forward) refers to motorcontrol.o(.text.leftMotorMove) for leftMotorMove
    motorcontrol.o(.ARM.exidx.text.forward) refers to motorcontrol.o(.text.forward) for [Anonymous Symbol]
    motorcontrol.o(.text.backward) refers to motorcontrol.o(.text.rightMotorMove) for rightMotorMove
    motorcontrol.o(.text.backward) refers to motorcontrol.o(.text.leftMotorMove) for leftMotorMove
    motorcontrol.o(.ARM.exidx.text.backward) refers to motorcontrol.o(.text.backward) for [Anonymous Symbol]
    motorcontrol.o(.text.left) refers to motorcontrol.o(.text.rightMotorMove) for rightMotorMove
    motorcontrol.o(.text.left) refers to motorcontrol.o(.text.leftMotorMove) for leftMotorMove
    motorcontrol.o(.ARM.exidx.text.left) refers to motorcontrol.o(.text.left) for [Anonymous Symbol]
    motorcontrol.o(.text.right) refers to motorcontrol.o(.text.rightMotorMove) for rightMotorMove
    motorcontrol.o(.text.right) refers to motorcontrol.o(.text.leftMotorMove) for leftMotorMove
    motorcontrol.o(.ARM.exidx.text.right) refers to motorcontrol.o(.text.right) for [Anonymous Symbol]
    motorcontrol.o(.text.stop) refers to motorcontrol.o(.text.rightMotorMove) for rightMotorMove
    motorcontrol.o(.text.stop) refers to motorcontrol.o(.text.leftMotorMove) for leftMotorMove
    motorcontrol.o(.ARM.exidx.text.stop) refers to motorcontrol.o(.text.stop) for [Anonymous Symbol]
    motorcontrol.o(.text.rightForward) refers to motorcontrol.o(.text.rightMotorMove) for rightMotorMove
    motorcontrol.o(.text.rightForward) refers to motorcontrol.o(.text.leftMotorMove) for leftMotorMove
    motorcontrol.o(.ARM.exidx.text.rightForward) refers to motorcontrol.o(.text.rightForward) for [Anonymous Symbol]
    motorcontrol.o(.text.rightBackward) refers to motorcontrol.o(.text.rightMotorMove) for rightMotorMove
    motorcontrol.o(.text.rightBackward) refers to motorcontrol.o(.text.leftMotorMove) for leftMotorMove
    motorcontrol.o(.ARM.exidx.text.rightBackward) refers to motorcontrol.o(.text.rightBackward) for [Anonymous Symbol]
    motorcontrol.o(.text.leftForward) refers to motorcontrol.o(.text.rightMotorMove) for rightMotorMove
    motorcontrol.o(.text.leftForward) refers to motorcontrol.o(.text.leftMotorMove) for leftMotorMove
    motorcontrol.o(.ARM.exidx.text.leftForward) refers to motorcontrol.o(.text.leftForward) for [Anonymous Symbol]
    motorcontrol.o(.text.leftBackward) refers to motorcontrol.o(.text.rightMotorMove) for rightMotorMove
    motorcontrol.o(.text.leftBackward) refers to motorcontrol.o(.text.leftMotorMove) for leftMotorMove
    motorcontrol.o(.ARM.exidx.text.leftBackward) refers to motorcontrol.o(.text.leftBackward) for [Anonymous Symbol]
    serial.o(.ARM.exidx.text.UART2_Receive_Poll) refers to serial.o(.text.UART2_Receive_Poll) for [Anonymous Symbol]
    serial.o(.text.initUART2) refers to uidiv_div0.o(.text) for __aeabi_uidiv
    serial.o(.ARM.exidx.text.initUART2) refers to serial.o(.text.initUART2) for [Anonymous Symbol]
    serial.o(.text.serial) refers to serial.o(.text.UART2_Receive_Poll) for UART2_Receive_Poll
    serial.o(.ARM.exidx.text.serial) refers to serial.o(.text.serial) for [Anonymous Symbol]
    audio.o(.text.freq_calc) refers to idiv_div0.o(.text) for __aeabi_idiv
    audio.o(.ARM.exidx.text.freq_calc) refers to audio.o(.text.freq_calc) for [Anonymous Symbol]
    audio.o(.text.duty_cycle_calc) refers to idiv_div0.o(.text) for __aeabi_idiv
    audio.o(.text.duty_cycle_calc) refers to fflti.o(.text) for __aeabi_i2f
    audio.o(.text.duty_cycle_calc) refers to fmul.o(.text) for __aeabi_fmul
    audio.o(.text.duty_cycle_calc) refers to ffixi.o(.text) for __aeabi_f2iz
    audio.o(.ARM.exidx.text.duty_cycle_calc) refers to audio.o(.text.duty_cycle_calc) for [Anonymous Symbol]
    audio.o(.ARM.exidx.text.initAudio) refers to audio.o(.text.initAudio) for [Anonymous Symbol]
    audio.o(.text.playEndAudio) refers to idiv_div0.o(.text) for __aeabi_idiv
    audio.o(.text.playEndAudio) refers to audio.o(.text.freq_calc) for freq_calc
    audio.o(.text.playEndAudio) refers to audio.o(.text.duty_cycle_calc) for duty_cycle_calc
    audio.o(.text.playEndAudio) refers to rtx_delay.o(.text.osDelay) for osDelay
    audio.o(.text.playEndAudio) refers to audio.o(.data.end_song) for end_song
    audio.o(.ARM.exidx.text.playEndAudio) refers to audio.o(.text.playEndAudio) for [Anonymous Symbol]
    audio.o(.text.stopSound) refers to rtx_delay.o(.text.osDelay) for osDelay
    audio.o(.ARM.exidx.text.stopSound) refers to audio.o(.text.stopSound) for [Anonymous Symbol]
    led.o(.ARM.exidx.text.initLED) refers to led.o(.text.initLED) for [Anonymous Symbol]
    led.o(.ARM.exidx.text.setLEDOutput) refers to led.o(.text.setLEDOutput) for [Anonymous Symbol]
    led.o(.text.initFrontLED) refers to led.o(.text.initLED) for initLED
    led.o(.ARM.exidx.text.initFrontLED) refers to led.o(.text.initFrontLED) for [Anonymous Symbol]
    led.o(.text.initBackLED) refers to led.o(.text.initLED) for initLED
    led.o(.ARM.exidx.text.initBackLED) refers to led.o(.text.initBackLED) for [Anonymous Symbol]
    led.o(.text.offAllLED) refers to led.o(.text.initFrontLED) for initFrontLED
    led.o(.text.offAllLED) refers to led.o(.text.setLEDOutput) for setLEDOutput
    led.o(.ARM.exidx.text.offAllLED) refers to led.o(.text.offAllLED) for [Anonymous Symbol]
    led.o(.text.flashLEDFast) refers to led.o(.text.initBackLED) for initBackLED
    led.o(.text.flashLEDFast) refers to led.o(.text.offAllLED) for offAllLED
    led.o(.text.flashLEDFast) refers to rtx_evflags.o(.text.osEventFlagsWait) for osEventFlagsWait
    led.o(.text.flashLEDFast) refers to led.o(.text.setLEDOutput) for setLEDOutput
    led.o(.text.flashLEDFast) refers to rtx_delay.o(.text.osDelay) for osDelay
    led.o(.text.flashLEDFast) refers to main.o(.bss.flagStation) for flagStation
    led.o(.ARM.exidx.text.flashLEDFast) refers to led.o(.text.flashLEDFast) for [Anonymous Symbol]
    led.o(.text.flashLEDSlow) refers to led.o(.text.initBackLED) for initBackLED
    led.o(.text.flashLEDSlow) refers to led.o(.text.offAllLED) for offAllLED
    led.o(.text.flashLEDSlow) refers to rtx_evflags.o(.text.osEventFlagsWait) for osEventFlagsWait
    led.o(.text.flashLEDSlow) refers to led.o(.text.setLEDOutput) for setLEDOutput
    led.o(.text.flashLEDSlow) refers to rtx_delay.o(.text.osDelay) for osDelay
    led.o(.text.flashLEDSlow) refers to main.o(.bss.flagRunning) for flagRunning
    led.o(.ARM.exidx.text.flashLEDSlow) refers to led.o(.text.flashLEDSlow) for [Anonymous Symbol]
    led.o(.text.lightAllLED) refers to led.o(.text.initFrontLED) for initFrontLED
    led.o(.text.lightAllLED) refers to rtx_evflags.o(.text.osEventFlagsWait) for osEventFlagsWait
    led.o(.text.lightAllLED) refers to led.o(.text.setLEDOutput) for setLEDOutput
    led.o(.text.lightAllLED) refers to main.o(.bss.flagStation) for flagStation
    led.o(.ARM.exidx.text.lightAllLED) refers to led.o(.text.lightAllLED) for [Anonymous Symbol]
    led.o(.text.runningLED) refers to led.o(.text.initFrontLED) for initFrontLED
    led.o(.text.runningLED) refers to led.o(.text.offAllLED) for offAllLED
    led.o(.text.runningLED) refers to rtx_evflags.o(.text.osEventFlagsWait) for osEventFlagsWait
    led.o(.text.runningLED) refers to led.o(.text.setLEDOutput) for setLEDOutput
    led.o(.text.runningLED) refers to rtx_delay.o(.text.osDelay) for osDelay
    led.o(.text.runningLED) refers to main.o(.bss.flagRunning) for flagRunning
    led.o(.ARM.exidx.text.runningLED) refers to led.o(.text.runningLED) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_idle_thread_attr) refers to rtx_lib.o(.bss.os.thread.cb) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_idle_thread_attr) refers to rtx_lib.o(.bss.os.thread.stack) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_thread_attr) refers to rtx_lib.o(.bss.os.thread.cb) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_thread_attr) refers to rtx_lib.o(.bss.os.thread.stack) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_mq_attr) refers to rtx_lib.o(.bss.os.msgqueue.cb) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_mq_attr) refers to rtx_lib.o(.bss.os.msgqueue.mem) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_lib.o(.bss.os) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_lib.o(.rodata.os_idle_thread_attr) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_lib.o(.rodata.os_timer_thread_attr) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_lib.o(.rodata.os_timer_mq_attr) for [Anonymous Symbol]
    rtx_lib.o(.data.irqRtxLibRef) refers to irq_cm0.o(.constdata) for irqRtxLib
    rtx_config.o(.ARM.exidx.text.osRtxIdleThread) refers to rtx_config.o(.text.osRtxIdleThread) for [Anonymous Symbol]
    rtx_config.o(.ARM.exidx.text.osRtxErrorNotify) refers to rtx_config.o(.text.osRtxErrorNotify) for [Anonymous Symbol]
    startup_mkl25z4.o(RESET) refers to startup_mkl25z4.o(STACK) for __initial_sp
    startup_mkl25z4.o(RESET) refers to startup_mkl25z4.o(.text) for Reset_Handler
    startup_mkl25z4.o(RESET) refers to irq_cm0.o(.text) for SVC_Handler
    startup_mkl25z4.o(RESET) refers to main.o(.text.UART2_IRQHandler) for UART2_IRQHandler
    startup_mkl25z4.o(.text) refers to system_mkl25z4.o(.text.SystemInit) for SystemInit
    startup_mkl25z4.o(.text) refers to entry.o(.ARM.Collect$$$$00000000) for __main
    system_mkl25z4.o(.ARM.exidx.text.SystemInit) refers to system_mkl25z4.o(.text.SystemInit) for [Anonymous Symbol]
    system_mkl25z4.o(.text.SystemCoreClockUpdate) refers to uidiv_div0.o(.text) for __aeabi_uidiv
    system_mkl25z4.o(.text.SystemCoreClockUpdate) refers to system_mkl25z4.o(.data.SystemCoreClock) for SystemCoreClock
    system_mkl25z4.o(.ARM.exidx.text.SystemCoreClockUpdate) refers to system_mkl25z4.o(.text.SystemCoreClockUpdate) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.osRtxKernelPreInit) refers to rtx_kernel.o(.text.osRtxKernelPreInit) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelInitialize) refers to rtx_kernel.o(.text.osRtxKernelPreInit) for osRtxKernelPreInit
    rtx_kernel.o(.text.osKernelInitialize) refers to rtx_kernel.o(.text.svcRtxKernelInitialize) for svcRtxKernelInitialize
    rtx_kernel.o(.ARM.exidx.text.osKernelInitialize) refers to rtx_kernel.o(.text.osKernelInitialize) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetInfo) refers to rtx_kernel.o(.text.svcRtxKernelGetInfo) for svcRtxKernelGetInfo
    rtx_kernel.o(.ARM.exidx.text.osKernelGetInfo) refers to rtx_kernel.o(.text.osKernelGetInfo) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetInfo) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_kernel.o(.text.svcRtxKernelGetInfo) refers to rtx_kernel.o(.rodata.str1.4) for .L.str
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetInfo) refers to rtx_kernel.o(.text.svcRtxKernelGetInfo) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetState) refers to rtx_kernel.o(.text.svcRtxKernelGetState) for svcRtxKernelGetState
    rtx_kernel.o(.text.osKernelGetState) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.osKernelGetState) refers to rtx_kernel.o(.text.osKernelGetState) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetState) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetState) refers to rtx_kernel.o(.text.svcRtxKernelGetState) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelStart) refers to rtx_kernel.o(.text.svcRtxKernelStart) for svcRtxKernelStart
    rtx_kernel.o(.ARM.exidx.text.osKernelStart) refers to rtx_kernel.o(.text.osKernelStart) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelLock) refers to rtx_kernel.o(.text.svcRtxKernelLock) for svcRtxKernelLock
    rtx_kernel.o(.ARM.exidx.text.osKernelLock) refers to rtx_kernel.o(.text.osKernelLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelUnlock) refers to rtx_kernel.o(.text.svcRtxKernelUnlock) for svcRtxKernelUnlock
    rtx_kernel.o(.ARM.exidx.text.osKernelUnlock) refers to rtx_kernel.o(.text.osKernelUnlock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.svcRtxKernelRestoreLock) for svcRtxKernelRestoreLock
    rtx_kernel.o(.ARM.exidx.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.osKernelRestoreLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelSuspend) refers to rtx_kernel.o(.text.svcRtxKernelSuspend) for svcRtxKernelSuspend
    rtx_kernel.o(.ARM.exidx.text.osKernelSuspend) refers to rtx_kernel.o(.text.osKernelSuspend) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelResume) refers to rtx_kernel.o(.text.svcRtxKernelResume) for svcRtxKernelResume
    rtx_kernel.o(.ARM.exidx.text.osKernelResume) refers to rtx_kernel.o(.text.osKernelResume) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetTickCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.osKernelGetTickCount) refers to rtx_kernel.o(.text.svcRtxKernelGetTickCount) for svcRtxKernelGetTickCount
    rtx_kernel.o(.ARM.exidx.text.osKernelGetTickCount) refers to rtx_kernel.o(.text.osKernelGetTickCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetTickCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickCount) refers to rtx_kernel.o(.text.svcRtxKernelGetTickCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetTickFreq) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.text.osKernelGetTickFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetTickFreq) for svcRtxKernelGetTickFreq
    rtx_kernel.o(.ARM.exidx.text.osKernelGetTickFreq) refers to rtx_kernel.o(.text.osKernelGetTickFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetTickFreq) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetTickFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetSysTimerCount) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) for svcRtxKernelGetSysTimerCount
    rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerCount) refers to rtx_kernel.o(.text.osKernelGetSysTimerCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetCount) for OS_Tick_GetCount
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetOverflow) for OS_Tick_GetOverflow
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetInterval) for OS_Tick_GetInterval
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerCount) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetSysTimerFreq) refers to os_systick.o(.text.OS_Tick_GetClock) for OS_Tick_GetClock
    rtx_kernel.o(.text.osKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) for svcRtxKernelGetSysTimerFreq
    rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.osKernelGetSysTimerFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) refers to os_systick.o(.text.OS_Tick_GetClock) for OS_Tick_GetClock
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to memseta.o(.text) for __aeabi_memclr4
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_memory.o(.text.osRtxMemoryInit) for osRtxMemoryInit
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelInitialize) refers to rtx_kernel.o(.text.svcRtxKernelInitialize) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadStartup) for osRtxThreadStartup
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_Setup) for OS_Tick_Setup
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_GetIRQn) for OS_Tick_GetIRQn
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_Enable) for OS_Tick_Enable
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.text.svcRtxKernelStart) refers to irq_cm0.o(.text) for SysTick_Handler
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelStart) refers to rtx_kernel.o(.text.svcRtxKernelStart) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelLock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelLock) refers to rtx_kernel.o(.text.svcRtxKernelLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelUnlock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelUnlock) refers to rtx_kernel.o(.text.svcRtxKernelUnlock) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelRestoreLock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelRestoreLock) refers to rtx_kernel.o(.text.svcRtxKernelRestoreLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to os_systick.o(.text.OS_Tick_Disable) for OS_Tick_Disable
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelSuspend) refers to rtx_kernel.o(.text.svcRtxKernelSuspend) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for osRtxThreadDelayTick
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_kernel.o(.text.svcRtxKernelResume) refers to os_systick.o(.text.OS_Tick_Enable) for OS_Tick_Enable
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelResume) refers to rtx_kernel.o(.text.svcRtxKernelResume) for [Anonymous Symbol]
    rtx_kernel.o(.data.os) refers to rtx_kernel.o(.rodata.str1.4) for .L.str
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListPut) refers to rtx_thread.o(.text.osRtxThreadListPut) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListGet) refers to rtx_thread.o(.text.osRtxThreadListGet) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListSort) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListRemove) refers to rtx_thread.o(.text.osRtxThreadListRemove) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadReadyPut) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_thread.o(.text.osRtxThreadReadyPut) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadReadyPut) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadRegPtr) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadSwitch) refers to rtx_thread.o(.text.osRtxThreadStackCheck) for osRtxThreadStackCheck
    rtx_thread.o(.text.osRtxThreadSwitch) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadSwitch) refers to rtx_thread.o(.text.osRtxThreadSwitch) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadStackCheck) refers to rtx_config.o(.text.osRtxErrorNotify) for osRtxErrorNotify
    rtx_thread.o(.text.osRtxThreadStackCheck) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadStackCheck) refers to rtx_thread.o(.text.osRtxThreadStackCheck) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadBlock) for osRtxThreadBlock
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadDispatch) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadBlock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadBlock) refers to rtx_thread.o(.text.osRtxThreadBlock) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayRemove) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayRemove) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for osRtxThreadDelayInsert
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayInsert) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayInsert) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_thread.o(.text.svcRtxThreadNew) for svcRtxThreadNew
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_config.o(.text.osRtxIdleThread) for osRtxIdleThread
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_timer.o(.text.osRtxTimerThread) for osRtxTimerThread
    rtx_thread.o(.ARM.exidx.text.osRtxThreadStartup) refers to rtx_thread.o(.text.osRtxThreadStartup) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_thread.o(.text.svcRtxThreadNew) refers to memseta.o(.text) for __aeabi_memclr4
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osThreadExit) for osThreadExit
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osRtxThreadPostProcess) for osRtxThreadPostProcess
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadNew) refers to rtx_thread.o(.text.svcRtxThreadNew) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadNew) refers to rtx_thread.o(.text.svcRtxThreadNew) for svcRtxThreadNew
    rtx_thread.o(.ARM.exidx.text.osThreadNew) refers to rtx_thread.o(.text.osThreadNew) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetName) refers to rtx_thread.o(.text.svcRtxThreadGetName) for svcRtxThreadGetName
    rtx_thread.o(.ARM.exidx.text.osThreadGetName) refers to rtx_thread.o(.text.osThreadGetName) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetId) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osThreadGetId) refers to rtx_thread.o(.text.svcRtxThreadGetId) for svcRtxThreadGetId
    rtx_thread.o(.ARM.exidx.text.osThreadGetId) refers to rtx_thread.o(.text.osThreadGetId) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetId) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetId) refers to rtx_thread.o(.text.svcRtxThreadGetId) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetState) refers to rtx_thread.o(.text.svcRtxThreadGetState) for svcRtxThreadGetState
    rtx_thread.o(.ARM.exidx.text.osThreadGetState) refers to rtx_thread.o(.text.osThreadGetState) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetStackSize) refers to rtx_thread.o(.text.svcRtxThreadGetStackSize) for svcRtxThreadGetStackSize
    rtx_thread.o(.ARM.exidx.text.osThreadGetStackSize) refers to rtx_thread.o(.text.osThreadGetStackSize) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetStackSpace) refers to rtx_thread.o(.text.svcRtxThreadGetStackSpace) for svcRtxThreadGetStackSpace
    rtx_thread.o(.ARM.exidx.text.osThreadGetStackSpace) refers to rtx_thread.o(.text.osThreadGetStackSpace) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadSetPriority) refers to rtx_thread.o(.text.svcRtxThreadSetPriority) for svcRtxThreadSetPriority
    rtx_thread.o(.ARM.exidx.text.osThreadSetPriority) refers to rtx_thread.o(.text.osThreadSetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetPriority) refers to rtx_thread.o(.text.svcRtxThreadGetPriority) for svcRtxThreadGetPriority
    rtx_thread.o(.ARM.exidx.text.osThreadGetPriority) refers to rtx_thread.o(.text.osThreadGetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadYield) refers to rtx_thread.o(.text.svcRtxThreadYield) for svcRtxThreadYield
    rtx_thread.o(.ARM.exidx.text.osThreadYield) refers to rtx_thread.o(.text.osThreadYield) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadSuspend) refers to rtx_thread.o(.text.svcRtxThreadSuspend) for svcRtxThreadSuspend
    rtx_thread.o(.ARM.exidx.text.osThreadSuspend) refers to rtx_thread.o(.text.osThreadSuspend) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadResume) refers to rtx_thread.o(.text.svcRtxThreadResume) for svcRtxThreadResume
    rtx_thread.o(.ARM.exidx.text.osThreadResume) refers to rtx_thread.o(.text.osThreadResume) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadDetach) refers to rtx_thread.o(.text.svcRtxThreadDetach) for svcRtxThreadDetach
    rtx_thread.o(.ARM.exidx.text.osThreadDetach) refers to rtx_thread.o(.text.osThreadDetach) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadJoin) refers to rtx_thread.o(.text.svcRtxThreadJoin) for svcRtxThreadJoin
    rtx_thread.o(.ARM.exidx.text.osThreadJoin) refers to rtx_thread.o(.text.osThreadJoin) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadExit) refers to rtx_thread.o(.text.svcRtxThreadExit) for svcRtxThreadExit
    rtx_thread.o(.ARM.exidx.text.osThreadExit) refers to rtx_thread.o(.text.osThreadExit) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadTerminate) refers to rtx_thread.o(.text.svcRtxThreadTerminate) for svcRtxThreadTerminate
    rtx_thread.o(.ARM.exidx.text.osThreadTerminate) refers to rtx_thread.o(.text.osThreadTerminate) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetCount) refers to rtx_thread.o(.text.svcRtxThreadGetCount) for svcRtxThreadGetCount
    rtx_thread.o(.ARM.exidx.text.osThreadGetCount) refers to rtx_thread.o(.text.osThreadGetCount) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadEnumerate) refers to rtx_thread.o(.text.svcRtxThreadEnumerate) for svcRtxThreadEnumerate
    rtx_thread.o(.ARM.exidx.text.osThreadEnumerate) refers to rtx_thread.o(.text.osThreadEnumerate) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsSet) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_thread.o(.text.osThreadFlagsSet) refers to rtx_thread.o(.text.svcRtxThreadFlagsSet) for svcRtxThreadFlagsSet
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsSet) refers to rtx_thread.o(.text.osThreadFlagsSet) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsClear) refers to rtx_thread.o(.text.svcRtxThreadFlagsClear) for svcRtxThreadFlagsClear
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsClear) refers to rtx_thread.o(.text.osThreadFlagsClear) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsGet) refers to rtx_thread.o(.text.svcRtxThreadFlagsGet) for svcRtxThreadFlagsGet
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsGet) refers to rtx_thread.o(.text.osThreadFlagsGet) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsWait) refers to rtx_thread.o(.text.svcRtxThreadFlagsWait) for svcRtxThreadFlagsWait
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsWait) refers to rtx_thread.o(.text.osThreadFlagsWait) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.ARM.exidx.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.osRtxThreadPostProcess) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.ThreadFlagsCheck) refers to rtx_thread.o(.text.ThreadFlagsCheck) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetName) refers to rtx_thread.o(.text.svcRtxThreadGetName) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetState) refers to rtx_thread.o(.text.svcRtxThreadGetState) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSize) refers to rtx_thread.o(.text.svcRtxThreadGetStackSize) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetStackSpace) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSpace) refers to rtx_thread.o(.text.svcRtxThreadGetStackSpace) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_thread.o(.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.svcRtxThreadSetPriority) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetPriority) refers to rtx_thread.o(.text.svcRtxThreadGetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadYield) refers to rtx_thread.o(.text.svcRtxThreadYield) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for osRtxThreadDelayInsert
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.svcRtxThreadSuspend) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadResume) refers to rtx_thread.o(.text.svcRtxThreadResume) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for osRtxThreadListUnlink
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.svcRtxThreadDetach) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadListUnlink) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListUnlink) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadFree) refers to rtx_thread.o(.text.osRtxThreadFree) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for osRtxThreadListUnlink
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.svcRtxThreadJoin) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for osRtxMutexOwnerRelease
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadExit) refers to rtx_thread.o(.text.svcRtxThreadExit) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for osRtxMutexOwnerRelease
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.svcRtxThreadTerminate) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetCount) refers to rtx_thread.o(.text.svcRtxThreadGetCount) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadEnumerate) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadEnumerate) refers to rtx_thread.o(.text.svcRtxThreadEnumerate) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.svcRtxThreadFlagsSet) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsClear) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsClear) refers to rtx_thread.o(.text.svcRtxThreadFlagsClear) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsGet) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsGet) refers to rtx_thread.o(.text.svcRtxThreadFlagsGet) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.svcRtxThreadFlagsWait) for [Anonymous Symbol]
    rtx_delay.o(.text.osDelay) refers to rtx_delay.o(.text.svcRtxDelay) for svcRtxDelay
    rtx_delay.o(.ARM.exidx.text.osDelay) refers to rtx_delay.o(.text.osDelay) for [Anonymous Symbol]
    rtx_delay.o(.text.osDelayUntil) refers to rtx_delay.o(.text.svcRtxDelayUntil) for svcRtxDelayUntil
    rtx_delay.o(.ARM.exidx.text.osDelayUntil) refers to rtx_delay.o(.text.osDelayUntil) for [Anonymous Symbol]
    rtx_delay.o(.text.svcRtxDelay) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_delay.o(.ARM.exidx.text.svcRtxDelay) refers to rtx_delay.o(.text.svcRtxDelay) for [Anonymous Symbol]
    rtx_delay.o(.text.svcRtxDelayUntil) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_delay.o(.text.svcRtxDelayUntil) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_delay.o(.ARM.exidx.text.svcRtxDelayUntil) refers to rtx_delay.o(.text.svcRtxDelayUntil) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsNew) refers to rtx_evflags.o(.text.svcRtxEventFlagsNew) for svcRtxEventFlagsNew
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsNew) refers to rtx_evflags.o(.text.osEventFlagsNew) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsGetName) refers to rtx_evflags.o(.text.svcRtxEventFlagsGetName) for svcRtxEventFlagsGetName
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsGetName) refers to rtx_evflags.o(.text.osEventFlagsGetName) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsSet) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_evflags.o(.text.osEventFlagsSet) refers to rtx_evflags.o(.text.svcRtxEventFlagsSet) for svcRtxEventFlagsSet
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsSet) refers to rtx_evflags.o(.text.osEventFlagsSet) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsClear) refers to rtx_evflags.o(.text.svcRtxEventFlagsClear) for svcRtxEventFlagsClear
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsClear) refers to rtx_evflags.o(.text.osEventFlagsClear) for [Anonymous Symbol]
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsClear) refers to rtx_evflags.o(.text.svcRtxEventFlagsClear) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsGet) refers to rtx_evflags.o(.text.svcRtxEventFlagsGet) for svcRtxEventFlagsGet
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsGet) refers to rtx_evflags.o(.text.osEventFlagsGet) for [Anonymous Symbol]
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsGet) refers to rtx_evflags.o(.text.svcRtxEventFlagsGet) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsWait) refers to rtx_evflags.o(.text.EventFlagsCheck) for EventFlagsCheck
    rtx_evflags.o(.text.osEventFlagsWait) refers to rtx_evflags.o(.text.svcRtxEventFlagsWait) for svcRtxEventFlagsWait
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsWait) refers to rtx_evflags.o(.text.osEventFlagsWait) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsDelete) refers to rtx_evflags.o(.text.svcRtxEventFlagsDelete) for svcRtxEventFlagsDelete
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsDelete) refers to rtx_evflags.o(.text.osEventFlagsDelete) for [Anonymous Symbol]
    rtx_evflags.o(.text.svcRtxEventFlagsNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_evflags.o(.text.svcRtxEventFlagsNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_evflags.o(.text.svcRtxEventFlagsNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_evflags.o(.text.svcRtxEventFlagsNew) refers to rtx_evflags.o(.text.osRtxEventFlagsPostProcess) for osRtxEventFlagsPostProcess
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsNew) refers to rtx_evflags.o(.text.svcRtxEventFlagsNew) for [Anonymous Symbol]
    rtx_evflags.o(.text.osRtxEventFlagsPostProcess) refers to rtx_evflags.o(.text.EventFlagsCheck) for EventFlagsCheck
    rtx_evflags.o(.text.osRtxEventFlagsPostProcess) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_evflags.o(.text.osRtxEventFlagsPostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_evflags.o(.ARM.exidx.text.osRtxEventFlagsPostProcess) refers to rtx_evflags.o(.text.osRtxEventFlagsPostProcess) for [Anonymous Symbol]
    rtx_evflags.o(.ARM.exidx.text.EventFlagsCheck) refers to rtx_evflags.o(.text.EventFlagsCheck) for [Anonymous Symbol]
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsGetName) refers to rtx_evflags.o(.text.svcRtxEventFlagsGetName) for [Anonymous Symbol]
    rtx_evflags.o(.text.svcRtxEventFlagsSet) refers to rtx_evflags.o(.text.EventFlagsCheck) for EventFlagsCheck
    rtx_evflags.o(.text.svcRtxEventFlagsSet) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_evflags.o(.text.svcRtxEventFlagsSet) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_evflags.o(.text.svcRtxEventFlagsSet) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsSet) refers to rtx_evflags.o(.text.svcRtxEventFlagsSet) for [Anonymous Symbol]
    rtx_evflags.o(.text.svcRtxEventFlagsWait) refers to rtx_evflags.o(.text.EventFlagsCheck) for EventFlagsCheck
    rtx_evflags.o(.text.svcRtxEventFlagsWait) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_evflags.o(.text.svcRtxEventFlagsWait) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_evflags.o(.text.svcRtxEventFlagsWait) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsWait) refers to rtx_evflags.o(.text.svcRtxEventFlagsWait) for [Anonymous Symbol]
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsDelete) refers to rtx_evflags.o(.text.svcRtxEventFlagsDelete) for [Anonymous Symbol]
    irq_cm0.o(.text) refers to rtx_system.o(.text.osRtxPendSV_Handler) for osRtxPendSV_Handler
    irq_cm0.o(.text) refers to rtx_system.o(.text.osRtxTick_Handler) for osRtxTick_Handler
    irq_cm0.o(.text) refers to rtx_kernel.o(.data.os) for osRtxInfo
    irq_cm0.o(.text) refers to rtx_lib.o(.rodata.osRtxUserSVC) for osRtxUserSVC
    rtx_timer.o(.text.osRtxTimerThread) refers to rtx_msgqueue.o(.text.osMessageQueueNew) for osMessageQueueNew
    rtx_timer.o(.text.osRtxTimerThread) refers to rtx_msgqueue.o(.text.osMessageQueueGet) for osMessageQueueGet
    rtx_timer.o(.text.osRtxTimerThread) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_timer.o(.text.osRtxTimerThread) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.text.osRtxTimerThread) refers to rtx_timer.o(.text.osRtxTimerTick) for osRtxTimerTick
    rtx_timer.o(.ARM.exidx.text.osRtxTimerThread) refers to rtx_timer.o(.text.osRtxTimerThread) for [Anonymous Symbol]
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_msgqueue.o(.text.osMessageQueuePut) for osMessageQueuePut
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_config.o(.text.osRtxErrorNotify) for osRtxErrorNotify
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_timer.o(.text.TimerInsert) for TimerInsert
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.osRtxTimerTick) refers to rtx_timer.o(.text.osRtxTimerTick) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerNew) refers to rtx_timer.o(.text.svcRtxTimerNew) for svcRtxTimerNew
    rtx_timer.o(.ARM.exidx.text.osTimerNew) refers to rtx_timer.o(.text.osTimerNew) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerGetName) refers to rtx_timer.o(.text.svcRtxTimerGetName) for svcRtxTimerGetName
    rtx_timer.o(.ARM.exidx.text.osTimerGetName) refers to rtx_timer.o(.text.osTimerGetName) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerStart) refers to rtx_timer.o(.text.svcRtxTimerStart) for svcRtxTimerStart
    rtx_timer.o(.ARM.exidx.text.osTimerStart) refers to rtx_timer.o(.text.osTimerStart) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerStop) refers to rtx_timer.o(.text.svcRtxTimerStop) for svcRtxTimerStop
    rtx_timer.o(.ARM.exidx.text.osTimerStop) refers to rtx_timer.o(.text.osTimerStop) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerIsRunning) refers to rtx_timer.o(.text.svcRtxTimerIsRunning) for svcRtxTimerIsRunning
    rtx_timer.o(.ARM.exidx.text.osTimerIsRunning) refers to rtx_timer.o(.text.osTimerIsRunning) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerDelete) refers to rtx_timer.o(.text.svcRtxTimerDelete) for svcRtxTimerDelete
    rtx_timer.o(.ARM.exidx.text.osTimerDelete) refers to rtx_timer.o(.text.osTimerDelete) for [Anonymous Symbol]
    rtx_timer.o(.text.TimerInsert) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.TimerInsert) refers to rtx_timer.o(.text.TimerInsert) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerNew) refers to rtx_timer.o(.text.svcRtxTimerNew) for [Anonymous Symbol]
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerGetName) refers to rtx_timer.o(.text.svcRtxTimerGetName) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_timer.o(.text.TimerInsert) for TimerInsert
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerStart) refers to rtx_timer.o(.text.svcRtxTimerStart) for [Anonymous Symbol]
    rtx_timer.o(.text.TimerRemove) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.TimerRemove) refers to rtx_timer.o(.text.TimerRemove) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerStop) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerStop) refers to rtx_timer.o(.text.svcRtxTimerStop) for [Anonymous Symbol]
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerIsRunning) refers to rtx_timer.o(.text.svcRtxTimerIsRunning) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerDelete) refers to rtx_timer.o(.text.svcRtxTimerDelete) for [Anonymous Symbol]
    rtx_mutex.o(.text.osRtxMutexOwnerRelease) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.osRtxMutexOwnerRelease) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRelease) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexNew) refers to rtx_mutex.o(.text.svcRtxMutexNew) for svcRtxMutexNew
    rtx_mutex.o(.ARM.exidx.text.osMutexNew) refers to rtx_mutex.o(.text.osMutexNew) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexGetName) refers to rtx_mutex.o(.text.svcRtxMutexGetName) for svcRtxMutexGetName
    rtx_mutex.o(.ARM.exidx.text.osMutexGetName) refers to rtx_mutex.o(.text.osMutexGetName) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexAcquire) refers to rtx_mutex.o(.text.svcRtxMutexAcquire) for svcRtxMutexAcquire
    rtx_mutex.o(.ARM.exidx.text.osMutexAcquire) refers to rtx_mutex.o(.text.osMutexAcquire) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexRelease) refers to rtx_mutex.o(.text.svcRtxMutexRelease) for svcRtxMutexRelease
    rtx_mutex.o(.ARM.exidx.text.osMutexRelease) refers to rtx_mutex.o(.text.osMutexRelease) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexGetOwner) refers to rtx_mutex.o(.text.svcRtxMutexGetOwner) for svcRtxMutexGetOwner
    rtx_mutex.o(.ARM.exidx.text.osMutexGetOwner) refers to rtx_mutex.o(.text.osMutexGetOwner) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexDelete) refers to rtx_mutex.o(.text.svcRtxMutexDelete) for svcRtxMutexDelete
    rtx_mutex.o(.ARM.exidx.text.osMutexDelete) refers to rtx_mutex.o(.text.osMutexDelete) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_mutex.o(.text.svcRtxMutexNew) refers to memseta.o(.text) for __aeabi_memclr4
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexNew) refers to rtx_mutex.o(.text.svcRtxMutexNew) for [Anonymous Symbol]
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetName) refers to rtx_mutex.o(.text.svcRtxMutexGetName) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexAcquire) refers to rtx_mutex.o(.text.svcRtxMutexAcquire) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexRelease) refers to rtx_mutex.o(.text.svcRtxMutexRelease) for [Anonymous Symbol]
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetOwner) refers to rtx_mutex.o(.text.svcRtxMutexGetOwner) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexDelete) refers to rtx_mutex.o(.text.svcRtxMutexDelete) for [Anonymous Symbol]
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryInit) refers to rtx_memory.o(.text.osRtxMemoryInit) for [Anonymous Symbol]
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryAlloc) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for [Anonymous Symbol]
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryFree) refers to rtx_memory.o(.text.osRtxMemoryFree) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolInit) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolNew) refers to rtx_mempool.o(.text.svcRtxMemoryPoolNew) for svcRtxMemoryPoolNew
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolNew) refers to rtx_mempool.o(.text.osMemoryPoolNew) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetName) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetName) for svcRtxMemoryPoolGetName
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetName) refers to rtx_mempool.o(.text.osMemoryPoolGetName) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolAlloc) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mempool.o(.text.osMemoryPoolAlloc) refers to rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) for svcRtxMemoryPoolAlloc
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolAlloc) refers to rtx_mempool.o(.text.osMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.svcRtxMemoryPoolFree) for svcRtxMemoryPoolFree
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.osMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity) for svcRtxMemoryPoolGetCapacity
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.osMemoryPoolGetCapacity) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize) for svcRtxMemoryPoolGetBlockSize
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.osMemoryPoolGetBlockSize) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetCount) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCount) for svcRtxMemoryPoolGetCount
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCount) refers to rtx_mempool.o(.text.osMemoryPoolGetCount) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCount) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCount) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetSpace) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace) for svcRtxMemoryPoolGetSpace
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetSpace) refers to rtx_mempool.o(.text.osMemoryPoolGetSpace) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetSpace) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolDelete) refers to rtx_mempool.o(.text.svcRtxMemoryPoolDelete) for svcRtxMemoryPoolDelete
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolDelete) refers to rtx_mempool.o(.text.osMemoryPoolDelete) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to memseta.o(.text) for __aeabi_memclr
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) for osRtxMemoryPoolPostProcess
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.svcRtxMemoryPoolNew) for [Anonymous Symbol]
    rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolPostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetName) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetName) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.svcRtxMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolDelete) refers to rtx_mempool.o(.text.svcRtxMemoryPoolDelete) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxTick_Handler) refers to os_systick.o(.text.OS_Tick_AcknowledgeIRQ) for OS_Tick_AcknowledgeIRQ
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for osRtxThreadDelayTick
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.ARM.exidx.text.osRtxTick_Handler) refers to rtx_system.o(.text.osRtxTick_Handler) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxPendSV_Handler) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_system.o(.text.osRtxPendSV_Handler) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.ARM.exidx.text.osRtxPendSV_Handler) refers to rtx_system.o(.text.osRtxPendSV_Handler) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxPostProcess) refers to rtx_config.o(.text.osRtxErrorNotify) for osRtxErrorNotify
    rtx_system.o(.text.osRtxPostProcess) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.ARM.exidx.text.osRtxPostProcess) refers to rtx_system.o(.text.osRtxPostProcess) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Setup) refers to uidiv_div0.o(.text) for __aeabi_uidiv
    os_systick.o(.text.OS_Tick_Setup) refers to system_mkl25z4.o(.data.SystemCoreClock) for SystemCoreClock
    os_systick.o(.text.OS_Tick_Setup) refers to os_systick.o(.bss.PendST) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_Setup) refers to os_systick.o(.text.OS_Tick_Setup) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Enable) refers to os_systick.o(.bss.PendST) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_Enable) refers to os_systick.o(.text.OS_Tick_Enable) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Disable) refers to os_systick.o(.bss.PendST) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_Disable) refers to os_systick.o(.text.OS_Tick_Disable) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_AcknowledgeIRQ) refers to os_systick.o(.text.OS_Tick_AcknowledgeIRQ) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetIRQn) refers to os_systick.o(.text.OS_Tick_GetIRQn) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_GetClock) refers to system_mkl25z4.o(.data.SystemCoreClock) for SystemCoreClock
    os_systick.o(.ARM.exidx.text.OS_Tick_GetClock) refers to os_systick.o(.text.OS_Tick_GetClock) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetInterval) refers to os_systick.o(.text.OS_Tick_GetInterval) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetCount) refers to os_systick.o(.text.OS_Tick_GetCount) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetOverflow) refers to os_systick.o(.text.OS_Tick_GetOverflow) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueNew) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueNew) for svcRtxMessageQueueNew
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueNew) refers to rtx_msgqueue.o(.text.osMessageQueueNew) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetName) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetName) for svcRtxMessageQueueGetName
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetName) refers to rtx_msgqueue.o(.text.osMessageQueueGetName) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_msgqueue.o(.text.svcRtxMessageQueuePut) for svcRtxMessageQueuePut
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueuePut) refers to rtx_msgqueue.o(.text.osMessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGet) for svcRtxMessageQueueGet
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.osMessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity) for svcRtxMessageQueueGetCapacity
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.osMessageQueueGetCapacity) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize) for svcRtxMessageQueueGetMsgSize
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.osMessageQueueGetMsgSize) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetCount) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount) for svcRtxMessageQueueGetCount
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCount) refers to rtx_msgqueue.o(.text.osMessageQueueGetCount) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCount) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace) for svcRtxMessageQueueGetSpace
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.osMessageQueueGetSpace) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueReset) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueReset) for svcRtxMessageQueueReset
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueReset) refers to rtx_msgqueue.o(.text.osMessageQueueReset) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueDelete) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) for svcRtxMessageQueueDelete
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueDelete) refers to rtx_msgqueue.o(.text.osMessageQueueDelete) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to memseta.o(.text) for __aeabi_memclr
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) for osRtxMessageQueuePostProcess
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueNew) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueNew) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueueRemove) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueuePut) refers to rtx_msgqueue.o(.text.MessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetName) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetName) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.svcRtxMessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueReset) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueDelete) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) for [Anonymous Symbol]
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry10a.o(.ARM.Collect$$$$0000000D) for __rt_final_cpp
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry11a.o(.ARM.Collect$$$$0000000F) for __rt_final_exit
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry7b.o(.ARM.Collect$$$$00000008) for _main_clock
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry8b.o(.ARM.Collect$$$$0000000A) for _main_cpp_init
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry9a.o(.ARM.Collect$$$$0000000B) for _main_init
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry5.o(.ARM.Collect$$$$00000004) for _main_scatterload
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry2.o(.ARM.Collect$$$$00000001) for _main_stk
    idiv.o(.text) refers to uidiv_div0.o(.text) for __aeabi_uidivmod
    fmul.o(.text) refers (Special) to iusefp.o(.text) for __I$use$fp
    fdiv.o(.text) refers (Special) to iusefp.o(.text) for __I$use$fp
    fdiv.o(.text) refers to fepilogue.o(.text) for _float_round
    fflti.o(.text) refers (Special) to iusefp.o(.text) for __I$use$fp
    fflti.o(.text) refers to fepilogue.o(.text) for _float_epilogue
    ffixi.o(.text) refers (Special) to iusefp.o(.text) for __I$use$fp
    entry2.o(.ARM.Collect$$$$00000001) refers to entry2.o(.ARM.Collect$$$$00002712) for __lit__00000000
    entry2.o(.ARM.Collect$$$$00002712) refers to startup_mkl25z4.o(STACK) for __initial_sp
    entry2.o(__vectab_stack_and_reset_area) refers to startup_mkl25z4.o(STACK) for __initial_sp
    entry2.o(__vectab_stack_and_reset_area) refers to entry.o(.ARM.Collect$$$$00000000) for __main
    entry5.o(.ARM.Collect$$$$00000004) refers to init.o(.text) for __scatterload
    entry9a.o(.ARM.Collect$$$$0000000B) refers to main.o(.text.main) for main
    entry9b.o(.ARM.Collect$$$$0000000C) refers to main.o(.text.main) for main
    idiv_div0.o(.text) refers to uidiv_div0.o(.text) for __aeabi_uidivmod
    fepilogue.o(.text) refers (Special) to iusefp.o(.text) for __I$use$fp
    init.o(.text) refers to entry5.o(.ARM.Collect$$$$00000004) for __main_after_scatterload


==============================================================================

Removing Unused input sections from the image.

    Removing main.o(.text), (0 bytes).
    Removing main.o(.ARM.exidx.text.runningLedThread), (8 bytes).
    Removing main.o(.ARM.exidx.text.flashLedStationaryThread), (8 bytes).
    Removing main.o(.text.flashLedMovingThread), (24 bytes).
    Removing main.o(.ARM.exidx.text.flashLedMovingThread), (8 bytes).
    Removing main.o(.text.lightAllLedThread), (24 bytes).
    Removing main.o(.ARM.exidx.text.lightAllLedThread), (8 bytes).
    Removing main.o(.ARM.exidx.text.run_sound_thread), (8 bytes).
    Removing main.o(.ARM.exidx.text.UART2_IRQHandler), (8 bytes).
    Removing main.o(.ARM.exidx.text.__NVIC_ClearPendingIRQ), (8 bytes).
    Removing main.o(.ARM.exidx.text.end_sound_thread), (8 bytes).
    Removing main.o(.ARM.exidx.text.control), (8 bytes).
    Removing main.o(.ARM.exidx.text.main), (8 bytes).
    Removing main.o(.bss.flashled_stk2), (512 bytes).
    Removing main.o(.rodata.flashled_attr2), (36 bytes).
    Removing main.o(.bss.allled_stk), (512 bytes).
    Removing main.o(.rodata.allled_attr), (36 bytes).
    Removing main.o(.ARM.use_no_argv), (4 bytes).
    Removing motorcontrol.o(.text), (0 bytes).
    Removing motorcontrol.o(.ARM.exidx.text.pwm_cal), (8 bytes).
    Removing motorcontrol.o(.text.parseMove), (96 bytes).
    Removing motorcontrol.o(.ARM.exidx.text.parseMove), (8 bytes).
    Removing motorcontrol.o(.ARM.exidx.text.initMotor), (8 bytes).
    Removing motorcontrol.o(.ARM.exidx.text.rightMotorMove), (8 bytes).
    Removing motorcontrol.o(.ARM.exidx.text.leftMotorMove), (8 bytes).
    Removing motorcontrol.o(.ARM.exidx.text.forward), (8 bytes).
    Removing motorcontrol.o(.ARM.exidx.text.backward), (8 bytes).
    Removing motorcontrol.o(.ARM.exidx.text.left), (8 bytes).
    Removing motorcontrol.o(.ARM.exidx.text.right), (8 bytes).
    Removing motorcontrol.o(.ARM.exidx.text.stop), (8 bytes).
    Removing motorcontrol.o(.ARM.exidx.text.rightForward), (8 bytes).
    Removing motorcontrol.o(.ARM.exidx.text.rightBackward), (8 bytes).
    Removing motorcontrol.o(.ARM.exidx.text.leftForward), (8 bytes).
    Removing motorcontrol.o(.ARM.exidx.text.leftBackward), (8 bytes).
    Removing serial.o(.text), (0 bytes).
    Removing serial.o(.text.UART2_Receive_Poll), (32 bytes).
    Removing serial.o(.ARM.exidx.text.UART2_Receive_Poll), (8 bytes).
    Removing serial.o(.ARM.exidx.text.initUART2), (8 bytes).
    Removing serial.o(.text.serial), (22 bytes).
    Removing serial.o(.ARM.exidx.text.serial), (8 bytes).
    Removing audio.o(.text), (0 bytes).
    Removing audio.o(.ARM.exidx.text.freq_calc), (8 bytes).
    Removing audio.o(.ARM.exidx.text.duty_cycle_calc), (8 bytes).
    Removing audio.o(.ARM.exidx.text.initAudio), (8 bytes).
    Removing audio.o(.ARM.exidx.text.playEndAudio), (8 bytes).
    Removing audio.o(.ARM.exidx.text.stopSound), (8 bytes).
    Removing led.o(.text), (0 bytes).
    Removing led.o(.ARM.exidx.text.initLED), (8 bytes).
    Removing led.o(.ARM.exidx.text.setLEDOutput), (8 bytes).
    Removing led.o(.ARM.exidx.text.initFrontLED), (8 bytes).
    Removing led.o(.ARM.exidx.text.initBackLED), (8 bytes).
    Removing led.o(.ARM.exidx.text.offAllLED), (8 bytes).
    Removing led.o(.ARM.exidx.text.flashLEDFast), (8 bytes).
    Removing led.o(.text.flashLEDSlow), (340 bytes).
    Removing led.o(.ARM.exidx.text.flashLEDSlow), (8 bytes).
    Removing led.o(.text.lightAllLED), (84 bytes).
    Removing led.o(.ARM.exidx.text.lightAllLED), (8 bytes).
    Removing led.o(.ARM.exidx.text.runningLED), (8 bytes).
    Removing rtx_lib.o(.text), (0 bytes).
    Removing rtx_lib.o(.data.irqRtxLibRef), (4 bytes).
    Removing rtx_config.o(.text), (0 bytes).
    Removing rtx_config.o(.ARM.exidx.text.osRtxIdleThread), (8 bytes).
    Removing rtx_config.o(.ARM.exidx.text.osRtxErrorNotify), (8 bytes).
    Removing startup_mkl25z4.o(HEAP), (0 bytes).
    Removing system_mkl25z4.o(.text), (0 bytes).
    Removing system_mkl25z4.o(.ARM.exidx.text.SystemInit), (8 bytes).
    Removing system_mkl25z4.o(.ARM.exidx.text.SystemCoreClockUpdate), (8 bytes).
    Removing rtx_kernel.o(.text), (0 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osRtxKernelPreInit), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelInitialize), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetInfo), (44 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetInfo), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetInfo), (56 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetInfo), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetState), (48 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetState), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetState), (12 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetState), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelStart), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelLock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelLock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelUnlock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelUnlock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelRestoreLock), (40 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelRestoreLock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelSuspend), (32 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelSuspend), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelResume), (32 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelResume), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetTickCount), (40 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetTickCount), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetTickCount), (12 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickCount), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetTickFreq), (40 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetTickFreq), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetTickFreq), (12 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickFreq), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetSysTimerCount), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerCount), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount), (44 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerCount), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetSysTimerFreq), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerFreq), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerFreq), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelInitialize), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelStart), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelLock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelLock), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelUnlock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelUnlock), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelRestoreLock), (48 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelRestoreLock), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelSuspend), (84 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelSuspend), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelResume), (136 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelResume), (8 bytes).
    Removing rtx_thread.o(.text), (0 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListPut), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListGet), (8 bytes).
    Removing rtx_thread.o(.text.osRtxThreadListSort), (38 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListSort), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListRemove), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadReadyPut), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayTick), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadRegPtr), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadSwitch), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadStackCheck), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDispatch), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadBlock), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitExit), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayRemove), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitEnter), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayInsert), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadStartup), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadNew), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadNew), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetName), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetName), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetId), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetId), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetId), (12 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetId), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetState), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetState), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetStackSize), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetStackSize), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetStackSpace), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetStackSpace), (8 bytes).
    Removing rtx_thread.o(.text.osThreadSetPriority), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadSetPriority), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetPriority), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetPriority), (8 bytes).
    Removing rtx_thread.o(.text.osThreadYield), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadYield), (8 bytes).
    Removing rtx_thread.o(.text.osThreadSuspend), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadSuspend), (8 bytes).
    Removing rtx_thread.o(.text.osThreadResume), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadResume), (8 bytes).
    Removing rtx_thread.o(.text.osThreadDetach), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadDetach), (8 bytes).
    Removing rtx_thread.o(.text.osThreadJoin), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadJoin), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadExit), (8 bytes).
    Removing rtx_thread.o(.text.osThreadTerminate), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadTerminate), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetCount), (32 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetCount), (8 bytes).
    Removing rtx_thread.o(.text.osThreadEnumerate), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadEnumerate), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsSet), (88 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsSet), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsClear), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsClear), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsGet), (32 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsGet), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsWait), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsWait), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadPostProcess), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.ThreadFlagsCheck), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetName), (18 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetName), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetState), (24 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetState), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetStackSize), (18 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSize), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetStackSpace), (68 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSpace), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadSetPriority), (72 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadSetPriority), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetPriority), (28 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetPriority), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadYield), (56 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadYield), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadSuspend), (136 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadSuspend), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadResume), (54 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadResume), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadDetach), (58 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadDetach), (8 bytes).
    Removing rtx_thread.o(.text.osRtxThreadListUnlink), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListUnlink), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadFree), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadJoin), (92 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadJoin), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadExit), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadTerminate), (188 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadTerminate), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetCount), (56 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetCount), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadEnumerate), (96 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadEnumerate), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsSet), (108 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsSet), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsClear), (56 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsClear), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsGet), (20 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsGet), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsWait), (80 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsWait), (8 bytes).
    Removing rtx_delay.o(.text), (0 bytes).
    Removing rtx_delay.o(.ARM.exidx.text.osDelay), (8 bytes).
    Removing rtx_delay.o(.text.osDelayUntil), (40 bytes).
    Removing rtx_delay.o(.ARM.exidx.text.osDelayUntil), (8 bytes).
    Removing rtx_delay.o(.ARM.exidx.text.svcRtxDelay), (8 bytes).
    Removing rtx_delay.o(.text.svcRtxDelayUntil), (32 bytes).
    Removing rtx_delay.o(.ARM.exidx.text.svcRtxDelayUntil), (8 bytes).
    Removing rtx_evflags.o(.text), (0 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsNew), (8 bytes).
    Removing rtx_evflags.o(.text.osEventFlagsGetName), (36 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsGetName), (8 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsSet), (8 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsClear), (8 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsClear), (8 bytes).
    Removing rtx_evflags.o(.text.osEventFlagsGet), (48 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsGet), (8 bytes).
    Removing rtx_evflags.o(.text.svcRtxEventFlagsGet), (18 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsGet), (8 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsWait), (8 bytes).
    Removing rtx_evflags.o(.text.osEventFlagsDelete), (40 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsDelete), (8 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsNew), (8 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osRtxEventFlagsPostProcess), (8 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.EventFlagsCheck), (8 bytes).
    Removing rtx_evflags.o(.text.svcRtxEventFlagsGetName), (18 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsGetName), (8 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsSet), (8 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsWait), (8 bytes).
    Removing rtx_evflags.o(.text.svcRtxEventFlagsDelete), (96 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsDelete), (8 bytes).
    Removing irq_cm0.o(.constdata), (1 bytes).
    Removing rtx_timer.o(.text), (0 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerThread), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerTick), (8 bytes).
    Removing rtx_timer.o(.text.osTimerNew), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerNew), (8 bytes).
    Removing rtx_timer.o(.text.osTimerGetName), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerGetName), (8 bytes).
    Removing rtx_timer.o(.text.osTimerStart), (40 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerStart), (8 bytes).
    Removing rtx_timer.o(.text.osTimerStop), (40 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerStop), (8 bytes).
    Removing rtx_timer.o(.text.osTimerIsRunning), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerIsRunning), (8 bytes).
    Removing rtx_timer.o(.text.osTimerDelete), (40 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerDelete), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.TimerInsert), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerNew), (132 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerNew), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerGetName), (18 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerGetName), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerStart), (72 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerStart), (8 bytes).
    Removing rtx_timer.o(.text.TimerRemove), (40 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.TimerRemove), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerStop), (42 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerStop), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerIsRunning), (24 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerIsRunning), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerDelete), (76 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerDelete), (8 bytes).
    Removing rtx_mutex.o(.text), (0 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRelease), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexNew), (36 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexNew), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexGetName), (36 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexGetName), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexAcquire), (40 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexAcquire), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexRelease), (40 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexRelease), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexGetOwner), (36 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexGetOwner), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexDelete), (40 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexDelete), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexNew), (112 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexNew), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexGetName), (18 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetName), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexAcquire), (152 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexAcquire), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexRelease), (192 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexRelease), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexGetOwner), (24 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetOwner), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexDelete), (188 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexDelete), (8 bytes).
    Removing rtx_memory.o(.text), (0 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryInit), (8 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryAlloc), (8 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryFree), (8 bytes).
    Removing rtx_mempool.o(.text), (0 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolInit), (8 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolNew), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolNew), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetName), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetName), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolAlloc), (56 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolFree), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetCapacity), (48 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCapacity), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity), (18 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCapacity), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetBlockSize), (48 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetBlockSize), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize), (18 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetBlockSize), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetCount), (48 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCount), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetCount), (18 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCount), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetSpace), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetSpace), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace), (22 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetSpace), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolDelete), (40 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolDelete), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolNew), (444 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolNew), (8 bytes).
    Removing rtx_mempool.o(.text.osRtxMemoryPoolPostProcess), (40 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolPostProcess), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetName), (18 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetName), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolAlloc), (64 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolFree), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolDelete), (112 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolDelete), (8 bytes).
    Removing rtx_system.o(.text), (0 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxTick_Handler), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxPendSV_Handler), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxPostProcess), (8 bytes).
    Removing os_systick.o(.text), (0 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Setup), (8 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Enable), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_Disable), (40 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Disable), (8 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_AcknowledgeIRQ), (8 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetIRQn), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetClock), (12 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetClock), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetInterval), (12 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetInterval), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetCount), (16 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetCount), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetOverflow), (16 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetOverflow), (8 bytes).
    Removing rtx_msgqueue.o(.text), (0 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueNew), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetName), (36 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetName), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetCapacity), (48 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCapacity), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity), (18 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCapacity), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetMsgSize), (48 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetMsgSize), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize), (18 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetMsgSize), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetCount), (48 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCount), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount), (18 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCount), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetSpace), (36 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetSpace), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace), (22 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetSpace), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueReset), (40 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueReset), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueDelete), (40 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueDelete), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueNew), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueuePostProcess), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueueRemove), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetName), (18 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetName), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueReset), (162 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueReset), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueDelete), (112 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueDelete), (8 bytes).

411 unused section(s) (total 10549 bytes) removed from the image.

==============================================================================

Image Symbol Table

    Local Symbols

    Symbol Name                              Value     Ov Type        Size  Object(Section)

    ../clib/../cmprslib/zerorunl2.c          0x00000000   Number         0  __dczerorl2.o ABSOLUTE
    ../clib/division.s                       0x00000000   Number         0  aeabi_sdiv.o ABSOLUTE
    ../clib/division.s                       0x00000000   Number         0  aeabi_sdiv_div0.o ABSOLUTE
    ../clib/microlib/division.c              0x00000000   Number         0  uidiv.o ABSOLUTE
    ../clib/microlib/division.c              0x00000000   Number         0  idiv.o ABSOLUTE
    ../clib/microlib/division.c              0x00000000   Number         0  uidiv_div0.o ABSOLUTE
    ../clib/microlib/division.c              0x00000000   Number         0  idiv_div0.o ABSOLUTE
    ../clib/microlib/division.c              0x00000000   Number         0  idiv0.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry2.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry5.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry7a.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry7b.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry8a.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry8b.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry9a.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry9b.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry10a.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry10b.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry11a.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry11b.o ABSOLUTE
    ../clib/microlib/string/memcpy.c         0x00000000   Number         0  memcpya.o ABSOLUTE
    ../clib/microlib/string/memcpy.c         0x00000000   Number         0  memcpyb.o ABSOLUTE
    ../clib/microlib/string/memset.c         0x00000000   Number         0  memseta.o ABSOLUTE
    ../clib/microlib/stubs.s                 0x00000000   Number         0  iusefp.o ABSOLUTE
    ../fplib/microlib/fpdiv.c                0x00000000   Number         0  fdiv.o ABSOLUTE
    ../fplib/microlib/fpepilogue.c           0x00000000   Number         0  fepilogue.o ABSOLUTE
    ../fplib/microlib/fpfix.c                0x00000000   Number         0  ffixi.o ABSOLUTE
    ../fplib/microlib/fpflt.c                0x00000000   Number         0  fflti.o ABSOLUTE
    ../fplib/microlib/fpmul.c                0x00000000   Number         0  fmul.o ABSOLUTE
    ..\..\..\Source\ARM\irq_cm0.s            0x00000000   Number         0  irq_cm0.o ABSOLUTE
    Audio.c                                  0x00000000   Number         0  audio.o ABSOLUTE
    LED.c                                    0x00000000   Number         0  led.o ABSOLUTE
    MotorControl.c                           0x00000000   Number         0  motorcontrol.o ABSOLUTE
    RTE/Device/MKL25Z128xxx4/startup_MKL25Z4.s 0x00000000   Number         0  startup_mkl25z4.o ABSOLUTE
    RTX_Config.c                             0x00000000   Number         0  rtx_config.o ABSOLUTE
    Serial.c                                 0x00000000   Number         0  serial.o ABSOLUTE
    dc.s                                     0x00000000   Number         0  dc.o ABSOLUTE
    handlers.s                               0x00000000   Number         0  handlers.o ABSOLUTE
    init.s                                   0x00000000   Number         0  init.o ABSOLUTE
    main.c                                   0x00000000   Number         0  main.o ABSOLUTE
    os_systick.c                             0x00000000   Number         0  os_systick.o ABSOLUTE
    rtx_delay.c                              0x00000000   Number         0  rtx_delay.o ABSOLUTE
    rtx_evflags.c                            0x00000000   Number         0  rtx_evflags.o ABSOLUTE
    rtx_kernel.c                             0x00000000   Number         0  rtx_kernel.o ABSOLUTE
    rtx_lib.c                                0x00000000   Number         0  rtx_lib.o ABSOLUTE
    rtx_memory.c                             0x00000000   Number         0  rtx_memory.o ABSOLUTE
    rtx_mempool.c                            0x00000000   Number         0  rtx_mempool.o ABSOLUTE
    rtx_msgqueue.c                           0x00000000   Number         0  rtx_msgqueue.o ABSOLUTE
    rtx_mutex.c                              0x00000000   Number         0  rtx_mutex.o ABSOLUTE
    rtx_system.c                             0x00000000   Number         0  rtx_system.o ABSOLUTE
    rtx_thread.c                             0x00000000   Number         0  rtx_thread.o ABSOLUTE
    rtx_timer.c                              0x00000000   Number         0  rtx_timer.o ABSOLUTE
    system_MKL25Z4.c                         0x00000000   Number         0  system_mkl25z4.o ABSOLUTE
    RESET                                    0x00000000   Section      192  startup_mkl25z4.o(RESET)
    .ARM.Collect$$$$00000000                 0x000000c0   Section        0  entry.o(.ARM.Collect$$$$00000000)
    .ARM.Collect$$$$00000001                 0x000000c0   Section        4  entry2.o(.ARM.Collect$$$$00000001)
    .ARM.Collect$$$$00000004                 0x000000c4   Section        4  entry5.o(.ARM.Collect$$$$00000004)
    .ARM.Collect$$$$00000008                 0x000000c8   Section        0  entry7b.o(.ARM.Collect$$$$00000008)
    .ARM.Collect$$$$0000000A                 0x000000c8   Section        0  entry8b.o(.ARM.Collect$$$$0000000A)
    .ARM.Collect$$$$0000000B                 0x000000c8   Section        8  entry9a.o(.ARM.Collect$$$$0000000B)
    __lit__00000000                          0x000000d0   Data           4  entry2.o(.ARM.Collect$$$$00002712)
    .ARM.Collect$$$$0000000D                 0x000000d0   Section        0  entry10a.o(.ARM.Collect$$$$0000000D)
    .ARM.Collect$$$$0000000F                 0x000000d0   Section        0  entry11a.o(.ARM.Collect$$$$0000000F)
    .ARM.Collect$$$$00002712                 0x000000d0   Section        4  entry2.o(.ARM.Collect$$$$00002712)
    .text                                    0x000000d4   Section       40  startup_mkl25z4.o(.text)
    .text                                    0x000000fc   Section      164  irq_cm0.o(.text)
    .text                                    0x000001a0   Section        0  memcpya.o(.text)
    .text                                    0x000001c4   Section        0  memseta.o(.text)
    .text                                    0x000001e8   Section        0  fmul.o(.text)
    .text                                    0x00000262   Section        0  fdiv.o(.text)
    .text                                    0x000002de   Section        0  fflti.o(.text)
    .text                                    0x000002f4   Section        0  ffixi.o(.text)
    .text                                    0x00000326   Section        0  uidiv_div0.o(.text)
    .text                                    0x00000364   Section        0  idiv_div0.o(.text)
    .text                                    0x000003b4   Section        0  iusefp.o(.text)
    .text                                    0x000003b4   Section       36  init.o(.text)
    MessageQueueRemove                       0x000003d9   Thumb Code    30  rtx_msgqueue.o(.text.MessageQueueRemove)
    [Anonymous Symbol]                       0x000003d8   Section        0  rtx_msgqueue.o(.text.MessageQueueRemove)
    [Anonymous Symbol]                       0x000003f6   Section        0  os_systick.o(.text.OS_Tick_GetIRQn)
    [Anonymous Symbol]                       0x000003fc   Section        0  rtx_kernel.o(.text.osRtxKernelPreInit)
    i.__scatterload_null                     0x000003fe   Section        2  handlers.o(i.__scatterload_null)
    .ARM.__at_0x400                          0x00000400   Section       16  startup_mkl25z4.o(.ARM.__at_0x400)
    .text                                    0x00000410   Section        0  fepilogue.o(.text)
    .text                                    0x00000492   Section        0  __dczerorl2.o(.text)
    EventFlagsCheck                          0x000004e9   Thumb Code    78  rtx_evflags.o(.text.EventFlagsCheck)
    [Anonymous Symbol]                       0x000004e8   Section        0  rtx_evflags.o(.text.EventFlagsCheck)
    MessageQueueGet                          0x00000537   Thumb Code    76  rtx_msgqueue.o(.text.MessageQueueGet)
    [Anonymous Symbol]                       0x00000536   Section        0  rtx_msgqueue.o(.text.MessageQueueGet)
    MessageQueuePut                          0x00000583   Thumb Code    98  rtx_msgqueue.o(.text.MessageQueuePut)
    [Anonymous Symbol]                       0x00000582   Section        0  rtx_msgqueue.o(.text.MessageQueuePut)
    [Anonymous Symbol]                       0x000005e4   Section        0  os_systick.o(.text.OS_Tick_AcknowledgeIRQ)
    [Anonymous Symbol]                       0x000005ec   Section        0  os_systick.o(.text.OS_Tick_Enable)
    __arm_cp.1_1                             0x0000060c   Number         4  os_systick.o(.text.OS_Tick_Enable)
    [Anonymous Symbol]                       0x00000610   Section        0  os_systick.o(.text.OS_Tick_Setup)
    __arm_cp.0_1                             0x0000064c   Number         4  os_systick.o(.text.OS_Tick_Setup)
    __arm_cp.0_2                             0x00000650   Number         4  os_systick.o(.text.OS_Tick_Setup)
    __arm_cp.0_3                             0x00000654   Number         4  os_systick.o(.text.OS_Tick_Setup)
    [Anonymous Symbol]                       0x00000658   Section        0  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    __arm_cp.1_0                             0x00000854   Number         4  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    __arm_cp.1_1                             0x00000858   Number         4  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    __arm_cp.1_2                             0x0000085c   Number         4  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    __arm_cp.1_3                             0x00000860   Number         4  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    __arm_cp.1_4                             0x00000864   Number         4  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    __arm_cp.1_5                             0x00000868   Number         4  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    __arm_cp.1_6                             0x0000086c   Number         4  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    __arm_cp.1_7                             0x00000870   Number         4  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    __arm_cp.1_8                             0x00000874   Number         4  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    __arm_cp.1_9                             0x00000878   Number         4  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    __arm_cp.1_10                            0x0000087c   Number         4  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    __arm_cp.1_11                            0x00000880   Number         4  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    [Anonymous Symbol]                       0x00000884   Section        0  system_mkl25z4.o(.text.SystemInit)
    __arm_cp.0_0                             0x0000088c   Number         4  system_mkl25z4.o(.text.SystemInit)
    ThreadFlagsCheck                         0x00000891   Thumb Code    78  rtx_thread.o(.text.ThreadFlagsCheck)
    [Anonymous Symbol]                       0x00000890   Section        0  rtx_thread.o(.text.ThreadFlagsCheck)
    TimerInsert                              0x000008e1   Thumb Code    76  rtx_timer.o(.text.TimerInsert)
    [Anonymous Symbol]                       0x000008e0   Section        0  rtx_timer.o(.text.TimerInsert)
    __arm_cp.8_0                             0x00000928   Number         4  rtx_timer.o(.text.TimerInsert)
    [Anonymous Symbol]                       0x0000092c   Section        0  main.o(.text.UART2_IRQHandler)
    __arm_cp.5_0                             0x0000094c   Number         4  main.o(.text.UART2_IRQHandler)
    __arm_cp.5_1                             0x00000950   Number         4  main.o(.text.UART2_IRQHandler)
    __NVIC_ClearPendingIRQ                   0x00000955   Thumb Code    40  main.o(.text.__NVIC_ClearPendingIRQ)
    [Anonymous Symbol]                       0x00000954   Section        0  main.o(.text.__NVIC_ClearPendingIRQ)
    __arm_cp.6_0                             0x0000097c   Number         4  main.o(.text.__NVIC_ClearPendingIRQ)
    [Anonymous Symbol]                       0x00000980   Section        0  motorcontrol.o(.text.backward)
    [Anonymous Symbol]                       0x000009a0   Section        0  main.o(.text.control)
    __arm_cp.8_0                             0x00000ba0   Number         4  main.o(.text.control)
    __arm_cp.8_1                             0x00000ba4   Number         4  main.o(.text.control)
    __arm_cp.8_3                             0x00000ba8   Number         4  main.o(.text.control)
    [Anonymous Symbol]                       0x00000bac   Section        0  audio.o(.text.duty_cycle_calc)
    [Anonymous Symbol]                       0x00000bd0   Section        0  main.o(.text.end_sound_thread)
    __arm_cp.7_0                             0x00000bec   Number         4  main.o(.text.end_sound_thread)
    [Anonymous Symbol]                       0x00000bf0   Section        0  led.o(.text.flashLEDFast)
    __arm_cp.5_0                             0x00000d40   Number         4  led.o(.text.flashLEDFast)
    [Anonymous Symbol]                       0x00000d44   Section        0  main.o(.text.flashLedStationaryThread)
    __arm_cp.1_0                             0x00000d54   Number         4  main.o(.text.flashLedStationaryThread)
    __arm_cp.1_1                             0x00000d58   Number         4  main.o(.text.flashLedStationaryThread)
    [Anonymous Symbol]                       0x00000d5c   Section        0  motorcontrol.o(.text.forward)
    __arm_cp.5_0                             0x00000d78   Number         4  motorcontrol.o(.text.forward)
    [Anonymous Symbol]                       0x00000d7c   Section        0  audio.o(.text.freq_calc)
    __arm_cp.0_0                             0x00000d90   Number         4  audio.o(.text.freq_calc)
    [Anonymous Symbol]                       0x00000d94   Section        0  audio.o(.text.initAudio)
    __arm_cp.2_1                             0x00000e00   Number         4  audio.o(.text.initAudio)
    __arm_cp.2_4                             0x00000e04   Number         4  audio.o(.text.initAudio)
    __arm_cp.2_5                             0x00000e08   Number         4  audio.o(.text.initAudio)
    [Anonymous Symbol]                       0x00000e0c   Section        0  led.o(.text.initBackLED)
    __arm_cp.3_0                             0x00000f10   Number         4  led.o(.text.initBackLED)
    __arm_cp.3_1                             0x00000f14   Number         4  led.o(.text.initBackLED)
    __arm_cp.3_3                             0x00000f18   Number         4  led.o(.text.initBackLED)
    [Anonymous Symbol]                       0x00000f1c   Section        0  led.o(.text.initFrontLED)
    __arm_cp.2_0                             0x00001028   Number         4  led.o(.text.initFrontLED)
    __arm_cp.2_1                             0x0000102c   Number         4  led.o(.text.initFrontLED)
    __arm_cp.2_2                             0x00001030   Number         4  led.o(.text.initFrontLED)
    __arm_cp.2_3                             0x00001034   Number         4  led.o(.text.initFrontLED)
    __arm_cp.2_4                             0x00001038   Number         4  led.o(.text.initFrontLED)
    __arm_cp.2_5                             0x0000103c   Number         4  led.o(.text.initFrontLED)
    [Anonymous Symbol]                       0x00001040   Section        0  led.o(.text.initLED)
    [Anonymous Symbol]                       0x00001094   Section        0  motorcontrol.o(.text.initMotor)
    __arm_cp.2_0                             0x00001178   Number         4  motorcontrol.o(.text.initMotor)
    __arm_cp.2_1                             0x0000117c   Number         4  motorcontrol.o(.text.initMotor)
    __arm_cp.2_2                             0x00001180   Number         4  motorcontrol.o(.text.initMotor)
    __arm_cp.2_3                             0x00001184   Number         4  motorcontrol.o(.text.initMotor)
    __arm_cp.2_4                             0x00001188   Number         4  motorcontrol.o(.text.initMotor)
    __arm_cp.2_5                             0x0000118c   Number         4  motorcontrol.o(.text.initMotor)
    __arm_cp.2_6                             0x00001190   Number         4  motorcontrol.o(.text.initMotor)
    __arm_cp.2_7                             0x00001194   Number         4  motorcontrol.o(.text.initMotor)
    __arm_cp.2_8                             0x00001198   Number         4  motorcontrol.o(.text.initMotor)
    __arm_cp.2_9                             0x0000119c   Number         4  motorcontrol.o(.text.initMotor)
    __arm_cp.2_10                            0x000011a0   Number         4  motorcontrol.o(.text.initMotor)
    __arm_cp.2_11                            0x000011a4   Number         4  motorcontrol.o(.text.initMotor)
    __arm_cp.2_12                            0x000011a8   Number         4  motorcontrol.o(.text.initMotor)
    __arm_cp.2_13                            0x000011ac   Number         4  motorcontrol.o(.text.initMotor)
    __arm_cp.2_14                            0x000011b0   Number         4  motorcontrol.o(.text.initMotor)
    __arm_cp.2_15                            0x000011b4   Number         4  motorcontrol.o(.text.initMotor)
    __arm_cp.2_16                            0x000011b8   Number         4  motorcontrol.o(.text.initMotor)
    [Anonymous Symbol]                       0x000011bc   Section        0  serial.o(.text.initUART2)
    __arm_cp.1_0                             0x00001240   Number         4  serial.o(.text.initUART2)
    __arm_cp.1_1                             0x00001244   Number         4  serial.o(.text.initUART2)
    __arm_cp.1_2                             0x00001248   Number         4  serial.o(.text.initUART2)
    __arm_cp.1_3                             0x0000124c   Number         4  serial.o(.text.initUART2)
    __arm_cp.1_4                             0x00001250   Number         4  serial.o(.text.initUART2)
    __arm_cp.1_5                             0x00001254   Number         4  serial.o(.text.initUART2)
    __arm_cp.1_6                             0x00001258   Number         4  serial.o(.text.initUART2)
    __arm_cp.1_7                             0x0000125c   Number         4  serial.o(.text.initUART2)
    __arm_cp.1_8                             0x00001260   Number         4  serial.o(.text.initUART2)
    __arm_cp.1_9                             0x00001264   Number         4  serial.o(.text.initUART2)
    [Anonymous Symbol]                       0x00001268   Section        0  motorcontrol.o(.text.left)
    [Anonymous Symbol]                       0x00001284   Section        0  motorcontrol.o(.text.leftBackward)
    [Anonymous Symbol]                       0x000012a0   Section        0  motorcontrol.o(.text.leftForward)
    __arm_cp.12_0                            0x000012bc   Number         4  motorcontrol.o(.text.leftForward)
    __arm_cp.12_1                            0x000012c0   Number         4  motorcontrol.o(.text.leftForward)
    [Anonymous Symbol]                       0x000012c4   Section        0  motorcontrol.o(.text.leftMotorMove)
    __arm_cp.4_0                             0x00001308   Number         4  motorcontrol.o(.text.leftMotorMove)
    __arm_cp.4_1                             0x0000130c   Number         4  motorcontrol.o(.text.leftMotorMove)
    [Anonymous Symbol]                       0x00001310   Section        0  main.o(.text.main)
    __arm_cp.9_0                             0x0000139c   Number         4  main.o(.text.main)
    __arm_cp.9_1                             0x000013a0   Number         4  main.o(.text.main)
    __arm_cp.9_2                             0x000013a4   Number         4  main.o(.text.main)
    __arm_cp.9_3                             0x000013a8   Number         4  main.o(.text.main)
    __arm_cp.9_4                             0x000013ac   Number         4  main.o(.text.main)
    __arm_cp.9_5                             0x000013b0   Number         4  main.o(.text.main)
    __arm_cp.9_6                             0x000013b4   Number         4  main.o(.text.main)
    __arm_cp.9_7                             0x000013b8   Number         4  main.o(.text.main)
    [Anonymous Symbol]                       0x000013bc   Section        0  led.o(.text.offAllLED)
    [Anonymous Symbol]                       0x000013f8   Section        0  rtx_delay.o(.text.osDelay)
    __arm_cp.0_0                             0x0000141c   Number         4  rtx_delay.o(.text.osDelay)
    [Anonymous Symbol]                       0x00001420   Section        0  rtx_evflags.o(.text.osEventFlagsClear)
    __arm_cp.3_0                             0x00001440   Number         4  rtx_evflags.o(.text.osEventFlagsClear)
    [Anonymous Symbol]                       0x00001444   Section        0  rtx_evflags.o(.text.osEventFlagsNew)
    __arm_cp.0_0                             0x00001464   Number         4  rtx_evflags.o(.text.osEventFlagsNew)
    [Anonymous Symbol]                       0x00001468   Section        0  rtx_evflags.o(.text.osEventFlagsSet)
    __arm_cp.2_0                             0x000014b4   Number         4  rtx_evflags.o(.text.osEventFlagsSet)
    [Anonymous Symbol]                       0x000014b8   Section        0  rtx_evflags.o(.text.osEventFlagsWait)
    __arm_cp.7_0                             0x000014f8   Number         4  rtx_evflags.o(.text.osEventFlagsWait)
    [Anonymous Symbol]                       0x000014fc   Section        0  rtx_kernel.o(.text.osKernelInitialize)
    __arm_cp.1_0                             0x00001520   Number         4  rtx_kernel.o(.text.osKernelInitialize)
    [Anonymous Symbol]                       0x00001524   Section        0  rtx_kernel.o(.text.osKernelStart)
    __arm_cp.6_0                             0x00001544   Number         4  rtx_kernel.o(.text.osKernelStart)
    [Anonymous Symbol]                       0x00001548   Section        0  rtx_msgqueue.o(.text.osMessageQueueGet)
    __arm_cp.3_0                             0x000015b8   Number         4  rtx_msgqueue.o(.text.osMessageQueueGet)
    [Anonymous Symbol]                       0x000015bc   Section        0  rtx_msgqueue.o(.text.osMessageQueueNew)
    __arm_cp.0_0                             0x000015dc   Number         4  rtx_msgqueue.o(.text.osMessageQueueNew)
    [Anonymous Symbol]                       0x000015e0   Section        0  rtx_msgqueue.o(.text.osMessageQueuePut)
    __arm_cp.2_0                             0x00001654   Number         4  rtx_msgqueue.o(.text.osMessageQueuePut)
    [Anonymous Symbol]                       0x00001658   Section        0  rtx_config.o(.text.osRtxErrorNotify)
    osRtxEventFlagsPostProcess               0x00001699   Thumb Code    52  rtx_evflags.o(.text.osRtxEventFlagsPostProcess)
    [Anonymous Symbol]                       0x00001698   Section        0  rtx_evflags.o(.text.osRtxEventFlagsPostProcess)
    [Anonymous Symbol]                       0x000016cc   Section        0  rtx_config.o(.text.osRtxIdleThread)
    [Anonymous Symbol]                       0x000016d4   Section        0  rtx_memory.o(.text.osRtxMemoryAlloc)
    [Anonymous Symbol]                       0x00001750   Section        0  rtx_memory.o(.text.osRtxMemoryFree)
    [Anonymous Symbol]                       0x0000179e   Section        0  rtx_memory.o(.text.osRtxMemoryInit)
    [Anonymous Symbol]                       0x000017d0   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolAlloc)
    [Anonymous Symbol]                       0x000017fe   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolFree)
    [Anonymous Symbol]                       0x00001838   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolInit)
    osRtxMessageQueuePostProcess             0x00001877   Thumb Code   188  rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess)
    [Anonymous Symbol]                       0x00001876   Section        0  rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess)
    [Anonymous Symbol]                       0x00001932   Section        0  rtx_mutex.o(.text.osRtxMutexOwnerRelease)
    [Anonymous Symbol]                       0x00001978   Section        0  rtx_system.o(.text.osRtxPendSV_Handler)
    [Anonymous Symbol]                       0x000019f4   Section        0  rtx_system.o(.text.osRtxPostProcess)
    __arm_cp.2_1                             0x00001a58   Number         4  rtx_system.o(.text.osRtxPostProcess)
    osRtxThreadBlock                         0x00001a5d   Thumb Code    52  rtx_thread.o(.text.osRtxThreadBlock)
    [Anonymous Symbol]                       0x00001a5c   Section        0  rtx_thread.o(.text.osRtxThreadBlock)
    osRtxThreadDelayInsert                   0x00001a91   Thumb Code   124  rtx_thread.o(.text.osRtxThreadDelayInsert)
    [Anonymous Symbol]                       0x00001a90   Section        0  rtx_thread.o(.text.osRtxThreadDelayInsert)
    osRtxThreadDelayRemove                   0x00001b0d   Thumb Code    64  rtx_thread.o(.text.osRtxThreadDelayRemove)
    [Anonymous Symbol]                       0x00001b0c   Section        0  rtx_thread.o(.text.osRtxThreadDelayRemove)
    [Anonymous Symbol]                       0x00001b4c   Section        0  rtx_thread.o(.text.osRtxThreadDelayTick)
    [Anonymous Symbol]                       0x00001b80   Section        0  rtx_thread.o(.text.osRtxThreadDispatch)
    osRtxThreadFree                          0x00001bcd   Thumb Code    80  rtx_thread.o(.text.osRtxThreadFree)
    [Anonymous Symbol]                       0x00001bcc   Section        0  rtx_thread.o(.text.osRtxThreadFree)
    [Anonymous Symbol]                       0x00001c1c   Section        0  rtx_thread.o(.text.osRtxThreadListGet)
    [Anonymous Symbol]                       0x00001c30   Section        0  rtx_thread.o(.text.osRtxThreadListPut)
    [Anonymous Symbol]                       0x00001c5c   Section        0  rtx_thread.o(.text.osRtxThreadListRemove)
    osRtxThreadPostProcess                   0x00001c75   Thumb Code    38  rtx_thread.o(.text.osRtxThreadPostProcess)
    [Anonymous Symbol]                       0x00001c74   Section        0  rtx_thread.o(.text.osRtxThreadPostProcess)
    [Anonymous Symbol]                       0x00001c9c   Section        0  rtx_thread.o(.text.osRtxThreadReadyPut)
    [Anonymous Symbol]                       0x00001cb0   Section        0  rtx_thread.o(.text.osRtxThreadRegPtr)
    [Anonymous Symbol]                       0x00001cb8   Section        0  rtx_thread.o(.text.osRtxThreadStackCheck)
    __arm_cp.8_1                             0x00001cdc   Number         4  rtx_thread.o(.text.osRtxThreadStackCheck)
    [Anonymous Symbol]                       0x00001ce0   Section        0  rtx_thread.o(.text.osRtxThreadStartup)
    __arm_cp.15_1                            0x00001d10   Number         4  rtx_thread.o(.text.osRtxThreadStartup)
    __arm_cp.15_3                            0x00001d14   Number         4  rtx_thread.o(.text.osRtxThreadStartup)
    [Anonymous Symbol]                       0x00001d18   Section        0  rtx_thread.o(.text.osRtxThreadSwitch)
    __arm_cp.7_0                             0x00001d28   Number         4  rtx_thread.o(.text.osRtxThreadSwitch)
    [Anonymous Symbol]                       0x00001d2c   Section        0  rtx_thread.o(.text.osRtxThreadWaitEnter)
    __arm_cp.13_0                            0x00001d64   Number         4  rtx_thread.o(.text.osRtxThreadWaitEnter)
    [Anonymous Symbol]                       0x00001d68   Section        0  rtx_thread.o(.text.osRtxThreadWaitExit)
    [Anonymous Symbol]                       0x00001d8c   Section        0  rtx_system.o(.text.osRtxTick_Handler)
    [Anonymous Symbol]                       0x00001dfc   Section        0  rtx_timer.o(.text.osRtxTimerThread)
    __arm_cp.0_0                             0x00001e2c   Number         4  rtx_timer.o(.text.osRtxTimerThread)
    __arm_cp.0_1                             0x00001e30   Number         4  rtx_timer.o(.text.osRtxTimerThread)
    __arm_cp.0_2                             0x00001e34   Number         4  rtx_timer.o(.text.osRtxTimerThread)
    osRtxTimerTick                           0x00001e39   Thumb Code    96  rtx_timer.o(.text.osRtxTimerTick)
    [Anonymous Symbol]                       0x00001e38   Section        0  rtx_timer.o(.text.osRtxTimerTick)
    __arm_cp.1_0                             0x00001e94   Number         4  rtx_timer.o(.text.osRtxTimerTick)
    [Anonymous Symbol]                       0x00001e98   Section        0  rtx_thread.o(.text.osThreadExit)
    __arm_cp.31_0                            0x00001ea0   Number         4  rtx_thread.o(.text.osThreadExit)
    [Anonymous Symbol]                       0x00001ea4   Section        0  rtx_thread.o(.text.osThreadNew)
    __arm_cp.17_0                            0x00001ec4   Number         4  rtx_thread.o(.text.osThreadNew)
    [Anonymous Symbol]                       0x00001ec8   Section        0  audio.o(.text.playEndAudio)
    __arm_cp.3_0                             0x00001f54   Number         4  audio.o(.text.playEndAudio)
    [Anonymous Symbol]                       0x00001f58   Section        0  motorcontrol.o(.text.pwm_cal)
    __arm_cp.0_1                             0x00001f74   Number         4  motorcontrol.o(.text.pwm_cal)
    [Anonymous Symbol]                       0x00001f78   Section        0  motorcontrol.o(.text.right)
    [Anonymous Symbol]                       0x00001f94   Section        0  motorcontrol.o(.text.rightBackward)
    [Anonymous Symbol]                       0x00001fb0   Section        0  motorcontrol.o(.text.rightForward)
    __arm_cp.10_0                            0x00001fcc   Number         4  motorcontrol.o(.text.rightForward)
    __arm_cp.10_1                            0x00001fd0   Number         4  motorcontrol.o(.text.rightForward)
    [Anonymous Symbol]                       0x00001fd4   Section        0  motorcontrol.o(.text.rightMotorMove)
    __arm_cp.3_0                             0x00002018   Number         4  motorcontrol.o(.text.rightMotorMove)
    __arm_cp.3_1                             0x0000201c   Number         4  motorcontrol.o(.text.rightMotorMove)
    [Anonymous Symbol]                       0x00002020   Section        0  main.o(.text.run_sound_thread)
    __arm_cp.4_0                             0x000020bc   Number         4  main.o(.text.run_sound_thread)
    __arm_cp.4_1                             0x000020c0   Number         4  main.o(.text.run_sound_thread)
    __arm_cp.4_3                             0x000020c4   Number         4  main.o(.text.run_sound_thread)
    [Anonymous Symbol]                       0x000020c8   Section        0  led.o(.text.runningLED)
    __arm_cp.8_0                             0x000021d8   Number         4  led.o(.text.runningLED)
    [Anonymous Symbol]                       0x000021dc   Section        0  main.o(.text.runningLedThread)
    __arm_cp.0_0                             0x000021ec   Number         4  main.o(.text.runningLedThread)
    __arm_cp.0_1                             0x000021f0   Number         4  main.o(.text.runningLedThread)
    [Anonymous Symbol]                       0x000021f4   Section        0  led.o(.text.setLEDOutput)
    [Anonymous Symbol]                       0x00002238   Section        0  motorcontrol.o(.text.stop)
    [Anonymous Symbol]                       0x00002254   Section        0  audio.o(.text.stopSound)
    __arm_cp.4_0                             0x0000226c   Number         4  audio.o(.text.stopSound)
    __arm_cp.4_1                             0x00002270   Number         4  audio.o(.text.stopSound)
    svcRtxDelay                              0x00002275   Thumb Code    18  rtx_delay.o(.text.svcRtxDelay)
    [Anonymous Symbol]                       0x00002274   Section        0  rtx_delay.o(.text.svcRtxDelay)
    svcRtxEventFlagsClear                    0x00002287   Thumb Code    50  rtx_evflags.o(.text.svcRtxEventFlagsClear)
    [Anonymous Symbol]                       0x00002286   Section        0  rtx_evflags.o(.text.svcRtxEventFlagsClear)
    svcRtxEventFlagsNew                      0x000022b9   Thumb Code   112  rtx_evflags.o(.text.svcRtxEventFlagsNew)
    [Anonymous Symbol]                       0x000022b8   Section        0  rtx_evflags.o(.text.svcRtxEventFlagsNew)
    __arm_cp.9_1                             0x00002324   Number         4  rtx_evflags.o(.text.svcRtxEventFlagsNew)
    svcRtxEventFlagsSet                      0x00002329   Thumb Code   124  rtx_evflags.o(.text.svcRtxEventFlagsSet)
    [Anonymous Symbol]                       0x00002328   Section        0  rtx_evflags.o(.text.svcRtxEventFlagsSet)
    svcRtxEventFlagsWait                     0x000023a5   Thumb Code    96  rtx_evflags.o(.text.svcRtxEventFlagsWait)
    [Anonymous Symbol]                       0x000023a4   Section        0  rtx_evflags.o(.text.svcRtxEventFlagsWait)
    svcRtxKernelInitialize                   0x00002405   Thumb Code   320  rtx_kernel.o(.text.svcRtxKernelInitialize)
    [Anonymous Symbol]                       0x00002404   Section        0  rtx_kernel.o(.text.svcRtxKernelInitialize)
    __arm_cp.20_2                            0x00002540   Number         4  rtx_kernel.o(.text.svcRtxKernelInitialize)
    svcRtxKernelStart                        0x00002545   Thumb Code   128  rtx_kernel.o(.text.svcRtxKernelStart)
    [Anonymous Symbol]                       0x00002544   Section        0  rtx_kernel.o(.text.svcRtxKernelStart)
    __arm_cp.21_1                            0x000025b8   Number         4  rtx_kernel.o(.text.svcRtxKernelStart)
    __arm_cp.21_2                            0x000025bc   Number         4  rtx_kernel.o(.text.svcRtxKernelStart)
    __arm_cp.21_3                            0x000025c0   Number         4  rtx_kernel.o(.text.svcRtxKernelStart)
    svcRtxMessageQueueGet                    0x000025c5   Thumb Code   232  rtx_msgqueue.o(.text.svcRtxMessageQueueGet)
    [Anonymous Symbol]                       0x000025c4   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueueGet)
    __arm_cp.21_0                            0x000026a8   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueGet)
    svcRtxMessageQueueNew                    0x000026ad   Thumb Code   484  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    [Anonymous Symbol]                       0x000026ac   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.14_0                            0x00002878   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.14_1                            0x0000287c   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.14_2                            0x00002880   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.14_3                            0x00002884   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.14_4                            0x00002888   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.14_5                            0x0000288c   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    svcRtxMessageQueuePut                    0x00002891   Thumb Code   184  rtx_msgqueue.o(.text.svcRtxMessageQueuePut)
    [Anonymous Symbol]                       0x00002890   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueuePut)
    svcRtxThreadExit                         0x00002949   Thumb Code   108  rtx_thread.o(.text.svcRtxThreadExit)
    [Anonymous Symbol]                       0x00002948   Section        0  rtx_thread.o(.text.svcRtxThreadExit)
    __arm_cp.54_0                            0x000029b0   Number         4  rtx_thread.o(.text.svcRtxThreadExit)
    svcRtxThreadNew                          0x000029b5   Thumb Code   492  rtx_thread.o(.text.svcRtxThreadNew)
    [Anonymous Symbol]                       0x000029b4   Section        0  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.16_0                            0x00002b88   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.16_1                            0x00002b8c   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.16_2                            0x00002b90   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.16_3                            0x00002b94   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.16_4                            0x00002b98   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.16_5                            0x00002b9c   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    i.__scatterload_copy                     0x00002ba0   Section       14  handlers.o(i.__scatterload_copy)
    i.__scatterload_zeroinit                 0x00002bae   Section       14  handlers.o(i.__scatterload_zeroinit)
    __tagsym$$used.0                         0x00002bbc   Number         0  rtx_lib.o(.rodata)
    __tagsym$$used.1                         0x00002c24   Number         0  rtx_lib.o(.rodata)
    os_idle_thread_attr                      0x00002c84   Data          36  rtx_lib.o(.rodata.os_idle_thread_attr)
    [Anonymous Symbol]                       0x00002c84   Section        0  rtx_lib.o(.rodata.os_idle_thread_attr)
    os_timer_mq_attr                         0x00002ca8   Data          24  rtx_lib.o(.rodata.os_timer_mq_attr)
    [Anonymous Symbol]                       0x00002ca8   Section        0  rtx_lib.o(.rodata.os_timer_mq_attr)
    os_timer_thread_attr                     0x00002cc0   Data          36  rtx_lib.o(.rodata.os_timer_thread_attr)
    [Anonymous Symbol]                       0x00002cc0   Section        0  rtx_lib.o(.rodata.os_timer_thread_attr)
    .L.str                                   0x00002d08   Data          11  rtx_kernel.o(.rodata.str1.4)
    [Anonymous Symbol]                       0x00002d08   Section        0  rtx_kernel.o(.rodata.str1.4)
    PendST                                   0x1ffff3d0   Data           1  os_systick.o(.bss.PendST)
    [Anonymous Symbol]                       0x1ffff3d0   Section        0  os_systick.o(.bss.PendST)
    flashled_stk1                            0x1ffff3e8   Data         512  main.o(.bss.flashled_stk1)
    [Anonymous Symbol]                       0x1ffff3e8   Section        0  main.o(.bss.flashled_stk1)
    os_isr_queue                             0x1ffff5e8   Data          64  rtx_lib.o(.bss.os)
    [Anonymous Symbol]                       0x1ffff5e8   Section        0  rtx_lib.o(.bss.os)
    os_mem                                   0x1ffff628   Data        4096  rtx_lib.o(.bss.os)
    os_timer_mq_cb                           0x20000628   Data          52  rtx_lib.o(.bss.os.msgqueue.cb)
    [Anonymous Symbol]                       0x20000628   Section        0  rtx_lib.o(.bss.os.msgqueue.cb)
    os_timer_mq_data                         0x2000065c   Data          80  rtx_lib.o(.bss.os.msgqueue.mem)
    [Anonymous Symbol]                       0x2000065c   Section        0  rtx_lib.o(.bss.os.msgqueue.mem)
    os_idle_thread_cb                        0x200006ac   Data          68  rtx_lib.o(.bss.os.thread.cb)
    [Anonymous Symbol]                       0x200006ac   Section        0  rtx_lib.o(.bss.os.thread.cb)
    os_timer_thread_cb                       0x200006f0   Data          68  rtx_lib.o(.bss.os.thread.cb)
    os_idle_thread_stack                     0x20000738   Data         256  rtx_lib.o(.bss.os.thread.stack)
    [Anonymous Symbol]                       0x20000738   Section        0  rtx_lib.o(.bss.os.thread.stack)
    os_timer_thread_stack                    0x20000838   Data         256  rtx_lib.o(.bss.os.thread.stack)
    runningled_stk                           0x20000938   Data         512  main.o(.bss.runningled_stk)
    [Anonymous Symbol]                       0x20000938   Section        0  main.o(.bss.runningled_stk)
    STACK                                    0x20000b40   Section      256  startup_mkl25z4.o(STACK)

    Global Symbols

    Symbol Name                              Value     Ov Type        Size  Object(Section)

    BuildAttributes$$THM_ISAv3M$S$PE$A:L22$X:L11$S22$IEEE1$IW$~IW$USESV6$~STKCKD$USESV7$~SHL$OTIME$ROPI$EBA8$MICROLIB$REQ8$PRES8$EABIv2 0x00000000   Number         0  anon$$obj.o ABSOLUTE
    __Vectors                                0x00000000   Data           4  startup_mkl25z4.o(RESET)
    .bss.os.evflags.cb$$Base                  - Undefined Weak Reference
    .bss.os.evflags.cb$$Limit                 - Undefined Weak Reference
    .bss.os.mempool.cb$$Base                  - Undefined Weak Reference
    .bss.os.mempool.cb$$Limit                 - Undefined Weak Reference
    .bss.os.mutex.cb$$Base                    - Undefined Weak Reference
    .bss.os.mutex.cb$$Limit                   - Undefined Weak Reference
    .bss.os.semaphore.cb$$Base                - Undefined Weak Reference
    .bss.os.semaphore.cb$$Limit               - Undefined Weak Reference
    .bss.os.timer.cb$$Base                    - Undefined Weak Reference
    .bss.os.timer.cb$$Limit                   - Undefined Weak Reference
    __cpp_initialize__aeabi_                  - Undefined Weak Reference
    __cxa_finalize                            - Undefined Weak Reference
    _clock_init                               - Undefined Weak Reference
    _microlib_exit                            - Undefined Weak Reference
    __Vectors_End                            0x000000c0   Data           0  startup_mkl25z4.o(RESET)
    __Vectors_Size                           0x000000c0   Number         0  startup_mkl25z4.o ABSOLUTE
    __main                                   0x000000c1   Thumb Code     0  entry.o(.ARM.Collect$$$$00000000)
    _main_stk                                0x000000c1   Thumb Code     0  entry2.o(.ARM.Collect$$$$00000001)
    _main_scatterload                        0x000000c5   Thumb Code     0  entry5.o(.ARM.Collect$$$$00000004)
    __main_after_scatterload                 0x000000c9   Thumb Code     0  entry5.o(.ARM.Collect$$$$00000004)
    _main_clock                              0x000000c9   Thumb Code     0  entry7b.o(.ARM.Collect$$$$00000008)
    _main_cpp_init                           0x000000c9   Thumb Code     0  entry8b.o(.ARM.Collect$$$$0000000A)
    _main_init                               0x000000c9   Thumb Code     0  entry9a.o(.ARM.Collect$$$$0000000B)
    __rt_final_cpp                           0x000000d1   Thumb Code     0  entry10a.o(.ARM.Collect$$$$0000000D)
    __rt_final_exit                          0x000000d1   Thumb Code     0  entry11a.o(.ARM.Collect$$$$0000000F)
    Reset_Handler                            0x000000d5   Thumb Code    12  startup_mkl25z4.o(.text)
    NMI_Handler                              0x000000e1   Thumb Code     2  startup_mkl25z4.o(.text)
    HardFault_Handler                        0x000000e3   Thumb Code     2  startup_mkl25z4.o(.text)
    ADC0_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    CMP0_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    DAC0_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    DMA0_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    DMA1_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    DMA2_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    DMA3_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    DefaultISR                               0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    FTFA_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    I2C0_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    I2C1_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    LLWU_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    LPTMR0_IRQHandler                        0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    LVD_LVW_IRQHandler                       0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    MCG_IRQHandler                           0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    PIT_IRQHandler                           0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    PORTA_IRQHandler                         0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    PORTD_IRQHandler                         0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    RTC_IRQHandler                           0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    RTC_Seconds_IRQHandler                   0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    Reserved20_IRQHandler                    0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    Reserved39_IRQHandler                    0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    Reserved45_IRQHandler                    0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    SPI0_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    SPI1_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    TPM0_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    TPM1_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    TPM2_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    TSI0_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    UART0_IRQHandler                         0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    UART1_IRQHandler                         0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    USB0_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    SVC_Handler                              0x000000fd   Thumb Code   132  irq_cm0.o(.text)
    PendSV_Handler                           0x00000181   Thumb Code    12  irq_cm0.o(.text)
    SysTick_Handler                          0x0000018d   Thumb Code    12  irq_cm0.o(.text)
    __aeabi_memcpy                           0x000001a1   Thumb Code    36  memcpya.o(.text)
    __aeabi_memcpy4                          0x000001a1   Thumb Code     0  memcpya.o(.text)
    __aeabi_memcpy8                          0x000001a1   Thumb Code     0  memcpya.o(.text)
    __aeabi_memset                           0x000001c5   Thumb Code    14  memseta.o(.text)
    __aeabi_memset4                          0x000001c5   Thumb Code     0  memseta.o(.text)
    __aeabi_memset8                          0x000001c5   Thumb Code     0  memseta.o(.text)
    __aeabi_memclr                           0x000001d3   Thumb Code     4  memseta.o(.text)
    __aeabi_memclr4                          0x000001d3   Thumb Code     0  memseta.o(.text)
    __aeabi_memclr8                          0x000001d3   Thumb Code     0  memseta.o(.text)
    _memset$wrapper                          0x000001d7   Thumb Code    18  memseta.o(.text)
    __aeabi_fmul                             0x000001e9   Thumb Code   122  fmul.o(.text)
    __aeabi_fdiv                             0x00000263   Thumb Code   124  fdiv.o(.text)
    __aeabi_i2f                              0x000002df   Thumb Code    22  fflti.o(.text)
    __aeabi_f2iz                             0x000002f5   Thumb Code    50  ffixi.o(.text)
    __aeabi_uidiv                            0x00000327   Thumb Code     0  uidiv_div0.o(.text)
    __aeabi_uidivmod                         0x00000327   Thumb Code    62  uidiv_div0.o(.text)
    __aeabi_idiv                             0x00000365   Thumb Code     0  idiv_div0.o(.text)
    __aeabi_idivmod$div0                     0x00000365   Thumb Code    74  idiv_div0.o(.text)
    __I$use$fp                               0x000003b5   Thumb Code     0  iusefp.o(.text)
    __scatterload                            0x000003b5   Thumb Code    28  init.o(.text)
    __scatterload_rt2                        0x000003b5   Thumb Code     0  init.o(.text)
    OS_Tick_GetIRQn                          0x000003f7   Thumb Code     6  os_systick.o(.text.OS_Tick_GetIRQn)
    osRtxKernelPreInit                       0x000003fd   Thumb Code     2  rtx_kernel.o(.text.osRtxKernelPreInit)
    __scatterload_null                       0x000003ff   Thumb Code     2  handlers.o(i.__scatterload_null)
    _float_round                             0x00000411   Thumb Code    16  fepilogue.o(.text)
    _float_epilogue                          0x00000421   Thumb Code   114  fepilogue.o(.text)
    __decompress                             0x00000493   Thumb Code     0  __dczerorl2.o(.text)
    __decompress1                            0x00000493   Thumb Code    86  __dczerorl2.o(.text)
    OS_Tick_AcknowledgeIRQ                   0x000005e5   Thumb Code     8  os_systick.o(.text.OS_Tick_AcknowledgeIRQ)
    OS_Tick_Enable                           0x000005ed   Thumb Code    36  os_systick.o(.text.OS_Tick_Enable)
    OS_Tick_Setup                            0x00000611   Thumb Code    72  os_systick.o(.text.OS_Tick_Setup)
    SystemCoreClockUpdate                    0x00000659   Thumb Code   508  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    SystemInit                               0x00000885   Thumb Code     8  system_mkl25z4.o(.text.SystemInit)
    UART2_IRQHandler                         0x0000092d   Thumb Code    32  main.o(.text.UART2_IRQHandler)
    backward                                 0x00000981   Thumb Code    32  motorcontrol.o(.text.backward)
    control                                  0x000009a1   Thumb Code   512  main.o(.text.control)
    duty_cycle_calc                          0x00000bad   Thumb Code    36  audio.o(.text.duty_cycle_calc)
    end_sound_thread                         0x00000bd1   Thumb Code    28  main.o(.text.end_sound_thread)
    flashLEDFast                             0x00000bf1   Thumb Code   336  led.o(.text.flashLEDFast)
    flashLedStationaryThread                 0x00000d45   Thumb Code    16  main.o(.text.flashLedStationaryThread)
    forward                                  0x00000d5d   Thumb Code    28  motorcontrol.o(.text.forward)
    freq_calc                                0x00000d7d   Thumb Code    20  audio.o(.text.freq_calc)
    initAudio                                0x00000d95   Thumb Code   108  audio.o(.text.initAudio)
    initBackLED                              0x00000e0d   Thumb Code   260  led.o(.text.initBackLED)
    initFrontLED                             0x00000f1d   Thumb Code   268  led.o(.text.initFrontLED)
    initLED                                  0x00001041   Thumb Code    84  led.o(.text.initLED)
    initMotor                                0x00001095   Thumb Code   228  motorcontrol.o(.text.initMotor)
    initUART2                                0x000011bd   Thumb Code   132  serial.o(.text.initUART2)
    left                                     0x00001269   Thumb Code    28  motorcontrol.o(.text.left)
    leftBackward                             0x00001285   Thumb Code    28  motorcontrol.o(.text.leftBackward)
    leftForward                              0x000012a1   Thumb Code    28  motorcontrol.o(.text.leftForward)
    leftMotorMove                            0x000012c5   Thumb Code    68  motorcontrol.o(.text.leftMotorMove)
    main                                     0x00001311   Thumb Code   140  main.o(.text.main)
    offAllLED                                0x000013bd   Thumb Code    60  led.o(.text.offAllLED)
    osDelay                                  0x000013f9   Thumb Code    40  rtx_delay.o(.text.osDelay)
    osEventFlagsClear                        0x00001421   Thumb Code    36  rtx_evflags.o(.text.osEventFlagsClear)
    osEventFlagsNew                          0x00001445   Thumb Code    36  rtx_evflags.o(.text.osEventFlagsNew)
    osEventFlagsSet                          0x00001469   Thumb Code    80  rtx_evflags.o(.text.osEventFlagsSet)
    osEventFlagsWait                         0x000014b9   Thumb Code    68  rtx_evflags.o(.text.osEventFlagsWait)
    osKernelInitialize                       0x000014fd   Thumb Code    40  rtx_kernel.o(.text.osKernelInitialize)
    osKernelStart                            0x00001525   Thumb Code    36  rtx_kernel.o(.text.osKernelStart)
    osMessageQueueGet                        0x00001549   Thumb Code   116  rtx_msgqueue.o(.text.osMessageQueueGet)
    osMessageQueueNew                        0x000015bd   Thumb Code    36  rtx_msgqueue.o(.text.osMessageQueueNew)
    osMessageQueuePut                        0x000015e1   Thumb Code   120  rtx_msgqueue.o(.text.osMessageQueuePut)
    osRtxErrorNotify                         0x00001659   Thumb Code    64  rtx_config.o(.text.osRtxErrorNotify)
    osRtxIdleThread                          0x000016cd   Thumb Code     8  rtx_config.o(.text.osRtxIdleThread)
    osRtxMemoryAlloc                         0x000016d5   Thumb Code   124  rtx_memory.o(.text.osRtxMemoryAlloc)
    osRtxMemoryFree                          0x00001751   Thumb Code    78  rtx_memory.o(.text.osRtxMemoryFree)
    osRtxMemoryInit                          0x0000179f   Thumb Code    50  rtx_memory.o(.text.osRtxMemoryInit)
    osRtxMemoryPoolAlloc                     0x000017d1   Thumb Code    46  rtx_mempool.o(.text.osRtxMemoryPoolAlloc)
    osRtxMemoryPoolFree                      0x000017ff   Thumb Code    58  rtx_mempool.o(.text.osRtxMemoryPoolFree)
    osRtxMemoryPoolInit                      0x00001839   Thumb Code    62  rtx_mempool.o(.text.osRtxMemoryPoolInit)
    osRtxMutexOwnerRelease                   0x00001933   Thumb Code    68  rtx_mutex.o(.text.osRtxMutexOwnerRelease)
    osRtxPendSV_Handler                      0x00001979   Thumb Code   124  rtx_system.o(.text.osRtxPendSV_Handler)
    osRtxPostProcess                         0x000019f5   Thumb Code   104  rtx_system.o(.text.osRtxPostProcess)
    osRtxThreadDelayTick                     0x00001b4d   Thumb Code    52  rtx_thread.o(.text.osRtxThreadDelayTick)
    osRtxThreadDispatch                      0x00001b81   Thumb Code    76  rtx_thread.o(.text.osRtxThreadDispatch)
    osRtxThreadListGet                       0x00001c1d   Thumb Code    20  rtx_thread.o(.text.osRtxThreadListGet)
    osRtxThreadListPut                       0x00001c31   Thumb Code    44  rtx_thread.o(.text.osRtxThreadListPut)
    osRtxThreadListRemove                    0x00001c5d   Thumb Code    24  rtx_thread.o(.text.osRtxThreadListRemove)
    osRtxThreadReadyPut                      0x00001c9d   Thumb Code    20  rtx_thread.o(.text.osRtxThreadReadyPut)
    osRtxThreadRegPtr                        0x00001cb1   Thumb Code     6  rtx_thread.o(.text.osRtxThreadRegPtr)
    osRtxThreadStackCheck                    0x00001cb9   Thumb Code    40  rtx_thread.o(.text.osRtxThreadStackCheck)
    osRtxThreadStartup                       0x00001ce1   Thumb Code    56  rtx_thread.o(.text.osRtxThreadStartup)
    osRtxThreadSwitch                        0x00001d19   Thumb Code    20  rtx_thread.o(.text.osRtxThreadSwitch)
    osRtxThreadWaitEnter                     0x00001d2d   Thumb Code    60  rtx_thread.o(.text.osRtxThreadWaitEnter)
    osRtxThreadWaitExit                      0x00001d69   Thumb Code    34  rtx_thread.o(.text.osRtxThreadWaitExit)
    osRtxTick_Handler                        0x00001d8d   Thumb Code   112  rtx_system.o(.text.osRtxTick_Handler)
    osRtxTimerThread                         0x00001dfd   Thumb Code    60  rtx_timer.o(.text.osRtxTimerThread)
    osThreadExit                             0x00001e99   Thumb Code    12  rtx_thread.o(.text.osThreadExit)
    osThreadNew                              0x00001ea5   Thumb Code    36  rtx_thread.o(.text.osThreadNew)
    playEndAudio                             0x00001ec9   Thumb Code   140  audio.o(.text.playEndAudio)
    pwm_cal                                  0x00001f59   Thumb Code    28  motorcontrol.o(.text.pwm_cal)
    right                                    0x00001f79   Thumb Code    28  motorcontrol.o(.text.right)
    rightBackward                            0x00001f95   Thumb Code    28  motorcontrol.o(.text.rightBackward)
    rightForward                             0x00001fb1   Thumb Code    28  motorcontrol.o(.text.rightForward)
    rightMotorMove                           0x00001fd5   Thumb Code    68  motorcontrol.o(.text.rightMotorMove)
    run_sound_thread                         0x00002021   Thumb Code   156  main.o(.text.run_sound_thread)
    runningLED                               0x000020c9   Thumb Code   272  led.o(.text.runningLED)
    runningLedThread                         0x000021dd   Thumb Code    16  main.o(.text.runningLedThread)
    setLEDOutput                             0x000021f5   Thumb Code    68  led.o(.text.setLEDOutput)
    stop                                     0x00002239   Thumb Code    28  motorcontrol.o(.text.stop)
    stopSound                                0x00002255   Thumb Code    24  audio.o(.text.stopSound)
    __scatterload_copy                       0x00002ba1   Thumb Code    14  handlers.o(i.__scatterload_copy)
    __scatterload_zeroinit                   0x00002baf   Thumb Code    14  handlers.o(i.__scatterload_zeroinit)
    osRtxConfig                              0x00002bbc   Data         104  rtx_lib.o(.rodata)
    os_cb_sections                           0x00002c24   Data          56  rtx_lib.o(.rodata)
    flashled_attr1                           0x00002c5c   Data          36  main.o(.rodata.flashled_attr1)
    osRtxUserSVC                             0x00002c80   Data           4  rtx_lib.o(.rodata.osRtxUserSVC)
    runningled_attr                          0x00002ce4   Data          36  main.o(.rodata.runningled_attr)
    Region$$Table$$Base                      0x00002d14   Number         0  anon$$obj.o(Region$$Table)
    Region$$Table$$Limit                     0x00002d34   Number         0  anon$$obj.o(Region$$Table)
    SystemCoreClock                          0x1ffff000   Data           4  system_mkl25z4.o(.data.SystemCoreClock)
    end_song                                 0x1ffff004   Data         104  audio.o(.data.end_song)
    osRtxInfo                                0x1ffff06c   Data         164  rtx_kernel.o(.data.os)
    run_song                                 0x1ffff110   Data         704  main.o(.data.run_song)
    flagEndingSound                          0x1ffff3d4   Data           4  main.o(.bss.flagEndingSound)
    flagFinish                               0x1ffff3d8   Data           4  main.o(.bss.flagFinish)
    flagRunning                              0x1ffff3dc   Data           4  main.o(.bss.flagRunning)
    flagRunningSound                         0x1ffff3e0   Data           4  main.o(.bss.flagRunningSound)
    flagStation                              0x1ffff3e4   Data           4  main.o(.bss.flagStation)
    .bss.os.msgqueue.cb$$Base                0x20000628   Number         0  rtx_lib.o(.bss.os.msgqueue.cb)
    .bss.os.msgqueue.cb$$Limit               0x2000065c   Number         0  rtx_lib.o(.bss.os.msgqueue.cb)
    .bss.os.thread.cb$$Base                  0x200006ac   Number         0  rtx_lib.o(.bss.os.thread.cb)
    .bss.os.thread.cb$$Limit                 0x20000734   Number         0  rtx_lib.o(.bss.os.thread.cb)
    rx_data                                  0x20000b38   Data           1  main.o(.bss.rx_data)
    __initial_sp                             0x20000c40   Data           0  startup_mkl25z4.o(STACK)



==============================================================================

Memory Map of the image

  Image Entry point : 0x000000d5

  Load Region LR_1 (Base: 0x00000000, Size: 0x00003104, Max: 0xffffffff, ABSOLUTE, COMPRESSED[0x00002dfc])

    Execution Region ER_RO (Exec base: 0x00000000, Load base: 0x00000000, Size: 0x00002d34, Max: 0xffffffff, ABSOLUTE)

    Exec Addr    Load Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x00000000   0x00000000   0x000000c0   Data   RO          166    RESET               startup_mkl25z4.o
    0x000000c0   0x000000c0   0x00000000   Code   RO          693  * .ARM.Collect$$$$00000000  mc_p.l(entry.o)
    0x000000c0   0x000000c0   0x00000004   Code   RO          716    .ARM.Collect$$$$00000001  mc_p.l(entry2.o)
    0x000000c4   0x000000c4   0x00000004   Code   RO          719    .ARM.Collect$$$$00000004  mc_p.l(entry5.o)
    0x000000c8   0x000000c8   0x00000000   Code   RO          721    .ARM.Collect$$$$00000008  mc_p.l(entry7b.o)
    0x000000c8   0x000000c8   0x00000000   Code   RO          723    .ARM.Collect$$$$0000000A  mc_p.l(entry8b.o)
    0x000000c8   0x000000c8   0x00000008   Code   RO          724    .ARM.Collect$$$$0000000B  mc_p.l(entry9a.o)
    0x000000d0   0x000000d0   0x00000000   Code   RO          726    .ARM.Collect$$$$0000000D  mc_p.l(entry10a.o)
    0x000000d0   0x000000d0   0x00000000   Code   RO          728    .ARM.Collect$$$$0000000F  mc_p.l(entry11a.o)
    0x000000d0   0x000000d0   0x00000004   Code   RO          717    .ARM.Collect$$$$00002712  mc_p.l(entry2.o)
    0x000000d4   0x000000d4   0x00000028   Code   RO          168  * .text               startup_mkl25z4.o
    0x000000fc   0x000000fc   0x000000a4   Code   RO          445    .text               RTX_CM0.lib(irq_cm0.o)
    0x000001a0   0x000001a0   0x00000024   Code   RO          702    .text               mc_p.l(memcpya.o)
    0x000001c4   0x000001c4   0x00000024   Code   RO          704    .text               mc_p.l(memseta.o)
    0x000001e8   0x000001e8   0x0000007a   Code   RO          708    .text               mf_p.l(fmul.o)
    0x00000262   0x00000262   0x0000007c   Code   RO          710    .text               mf_p.l(fdiv.o)
    0x000002de   0x000002de   0x00000016   Code   RO          712    .text               mf_p.l(fflti.o)
    0x000002f4   0x000002f4   0x00000032   Code   RO          714    .text               mf_p.l(ffixi.o)
    0x00000326   0x00000326   0x0000003e   Code   RO          732    .text               mc_p.l(uidiv_div0.o)
    0x00000364   0x00000364   0x00000050   Code   RO          734    .text               mc_p.l(idiv_div0.o)
    0x000003b4   0x000003b4   0x00000000   Code   RO          738    .text               mc_p.l(iusefp.o)
    0x000003b4   0x000003b4   0x00000024   Code   RO          741    .text               mc_p.l(init.o)
    0x000003d8   0x000003d8   0x0000001e   Code   RO          669    .text.MessageQueueRemove  RTX_CM0.lib(rtx_msgqueue.o)
    0x000003f6   0x000003f6   0x00000006   Code   RO          617    .text.OS_Tick_GetIRQn  RTX_CM0.lib(os_systick.o)
    0x000003fc   0x000003fc   0x00000002   Code   RO          189    .text.osRtxKernelPreInit  RTX_CM0.lib(rtx_kernel.o)
    0x000003fe   0x000003fe   0x00000002   Code   RO          746    i.__scatterload_null  mc_p.l(handlers.o)
    0x00000400   0x00000400   0x00000010   Code   RO          167    .ARM.__at_0x400     startup_mkl25z4.o
    0x00000410   0x00000410   0x00000082   Code   RO          739    .text               mf_p.l(fepilogue.o)
    0x00000492   0x00000492   0x00000056   Code   RO          751    .text               mc_p.l(__dczerorl2.o)
    0x000004e8   0x000004e8   0x0000004e   Code   RO          426    .text.EventFlagsCheck  RTX_CM0.lib(rtx_evflags.o)
    0x00000536   0x00000536   0x0000004c   Code   RO          677    .text.MessageQueueGet  RTX_CM0.lib(rtx_msgqueue.o)
    0x00000582   0x00000582   0x00000062   Code   RO          671    .text.MessageQueuePut  RTX_CM0.lib(rtx_msgqueue.o)
    0x000005e4   0x000005e4   0x00000008   Code   RO          615    .text.OS_Tick_AcknowledgeIRQ  RTX_CM0.lib(os_systick.o)
    0x000005ec   0x000005ec   0x00000024   Code   RO          611    .text.OS_Tick_Enable  RTX_CM0.lib(os_systick.o)
    0x00000610   0x00000610   0x00000048   Code   RO          609    .text.OS_Tick_Setup  RTX_CM0.lib(os_systick.o)
    0x00000658   0x00000658   0x0000022c   Code   RO          179    .text.SystemCoreClockUpdate  system_mkl25z4.o
    0x00000884   0x00000884   0x0000000c   Code   RO          177    .text.SystemInit    system_mkl25z4.o
    0x00000890   0x00000890   0x0000004e   Code   RO          334    .text.ThreadFlagsCheck  RTX_CM0.lib(rtx_thread.o)
    0x000008de   0x000008de   0x00000002   PAD
    0x000008e0   0x000008e0   0x0000004c   Code   RO          466    .text.TimerInsert   RTX_CM0.lib(rtx_timer.o)
    0x0000092c   0x0000092c   0x00000028   Code   RO           12    .text.UART2_IRQHandler  main.o
    0x00000954   0x00000954   0x0000002c   Code   RO           14    .text.__NVIC_ClearPendingIRQ  main.o
    0x00000980   0x00000980   0x00000020   Code   RO           57    .text.backward      motorcontrol.o
    0x000009a0   0x000009a0   0x0000020c   Code   RO           18    .text.control       main.o
    0x00000bac   0x00000bac   0x00000024   Code   RO           95    .text.duty_cycle_calc  audio.o
    0x00000bd0   0x00000bd0   0x00000020   Code   RO           16    .text.end_sound_thread  main.o
    0x00000bf0   0x00000bf0   0x00000154   Code   RO          121    .text.flashLEDFast  led.o
    0x00000d44   0x00000d44   0x00000018   Code   RO            4    .text.flashLedStationaryThread  main.o
    0x00000d5c   0x00000d5c   0x00000020   Code   RO           55    .text.forward       motorcontrol.o
    0x00000d7c   0x00000d7c   0x00000018   Code   RO           93    .text.freq_calc     audio.o
    0x00000d94   0x00000d94   0x00000078   Code   RO           97    .text.initAudio     audio.o
    0x00000e0c   0x00000e0c   0x00000110   Code   RO          117    .text.initBackLED   led.o
    0x00000f1c   0x00000f1c   0x00000124   Code   RO          115    .text.initFrontLED  led.o
    0x00001040   0x00001040   0x00000054   Code   RO          111    .text.initLED       led.o
    0x00001094   0x00001094   0x00000128   Code   RO           49    .text.initMotor     motorcontrol.o
    0x000011bc   0x000011bc   0x000000ac   Code   RO           82    .text.initUART2     serial.o
    0x00001268   0x00001268   0x0000001c   Code   RO           59    .text.left          motorcontrol.o
    0x00001284   0x00001284   0x0000001c   Code   RO           71    .text.leftBackward  motorcontrol.o
    0x000012a0   0x000012a0   0x00000024   Code   RO           69    .text.leftForward   motorcontrol.o
    0x000012c4   0x000012c4   0x0000004c   Code   RO           53    .text.leftMotorMove  motorcontrol.o
    0x00001310   0x00001310   0x000000ac   Code   RO           20    .text.main          main.o
    0x000013bc   0x000013bc   0x0000003c   Code   RO          119    .text.offAllLED     led.o
    0x000013f8   0x000013f8   0x00000028   Code   RO          387    .text.osDelay       RTX_CM0.lib(rtx_delay.o)
    0x00001420   0x00001420   0x00000024   Code   RO          410    .text.osEventFlagsClear  RTX_CM0.lib(rtx_evflags.o)
    0x00001444   0x00001444   0x00000024   Code   RO          404    .text.osEventFlagsNew  RTX_CM0.lib(rtx_evflags.o)
    0x00001468   0x00001468   0x00000050   Code   RO          408    .text.osEventFlagsSet  RTX_CM0.lib(rtx_evflags.o)
    0x000014b8   0x000014b8   0x00000044   Code   RO          418    .text.osEventFlagsWait  RTX_CM0.lib(rtx_evflags.o)
    0x000014fc   0x000014fc   0x00000028   Code   RO          191    .text.osKernelInitialize  RTX_CM0.lib(rtx_kernel.o)
    0x00001524   0x00001524   0x00000024   Code   RO          201    .text.osKernelStart  RTX_CM0.lib(rtx_kernel.o)
    0x00001548   0x00001548   0x00000074   Code   RO          643    .text.osMessageQueueGet  RTX_CM0.lib(rtx_msgqueue.o)
    0x000015bc   0x000015bc   0x00000024   Code   RO          637    .text.osMessageQueueNew  RTX_CM0.lib(rtx_msgqueue.o)
    0x000015e0   0x000015e0   0x00000078   Code   RO          641    .text.osMessageQueuePut  RTX_CM0.lib(rtx_msgqueue.o)
    0x00001658   0x00001658   0x00000040   Code   RO          156    .text.osRtxErrorNotify  rtx_config.o
    0x00001698   0x00001698   0x00000034   Code   RO          424    .text.osRtxEventFlagsPostProcess  RTX_CM0.lib(rtx_evflags.o)
    0x000016cc   0x000016cc   0x00000008   Code   RO          154    .text.osRtxIdleThread  rtx_config.o
    0x000016d4   0x000016d4   0x0000007c   Code   RO          528    .text.osRtxMemoryAlloc  RTX_CM0.lib(rtx_memory.o)
    0x00001750   0x00001750   0x0000004e   Code   RO          530    .text.osRtxMemoryFree  RTX_CM0.lib(rtx_memory.o)
    0x0000179e   0x0000179e   0x00000032   Code   RO          526    .text.osRtxMemoryInit  RTX_CM0.lib(rtx_memory.o)
    0x000017d0   0x000017d0   0x0000002e   Code   RO          543    .text.osRtxMemoryPoolAlloc  RTX_CM0.lib(rtx_mempool.o)
    0x000017fe   0x000017fe   0x0000003a   Code   RO          545    .text.osRtxMemoryPoolFree  RTX_CM0.lib(rtx_mempool.o)
    0x00001838   0x00001838   0x0000003e   Code   RO          541    .text.osRtxMemoryPoolInit  RTX_CM0.lib(rtx_mempool.o)
    0x00001876   0x00001876   0x000000bc   Code   RO          667    .text.osRtxMessageQueuePostProcess  RTX_CM0.lib(rtx_msgqueue.o)
    0x00001932   0x00001932   0x00000044   Code   RO          491    .text.osRtxMutexOwnerRelease  RTX_CM0.lib(rtx_mutex.o)
    0x00001976   0x00001976   0x00000002   PAD
    0x00001978   0x00001978   0x0000007c   Code   RO          596    .text.osRtxPendSV_Handler  RTX_CM0.lib(rtx_system.o)
    0x000019f4   0x000019f4   0x00000068   Code   RO          598    .text.osRtxPostProcess  RTX_CM0.lib(rtx_system.o)
    0x00001a5c   0x00001a5c   0x00000034   Code   RO          274    .text.osRtxThreadBlock  RTX_CM0.lib(rtx_thread.o)
    0x00001a90   0x00001a90   0x0000007c   Code   RO          282    .text.osRtxThreadDelayInsert  RTX_CM0.lib(rtx_thread.o)
    0x00001b0c   0x00001b0c   0x00000040   Code   RO          278    .text.osRtxThreadDelayRemove  RTX_CM0.lib(rtx_thread.o)
    0x00001b4c   0x00001b4c   0x00000034   Code   RO          264    .text.osRtxThreadDelayTick  RTX_CM0.lib(rtx_thread.o)
    0x00001b80   0x00001b80   0x0000004c   Code   RO          272    .text.osRtxThreadDispatch  RTX_CM0.lib(rtx_thread.o)
    0x00001bcc   0x00001bcc   0x00000050   Code   RO          358    .text.osRtxThreadFree  RTX_CM0.lib(rtx_thread.o)
    0x00001c1c   0x00001c1c   0x00000014   Code   RO          256    .text.osRtxThreadListGet  RTX_CM0.lib(rtx_thread.o)
    0x00001c30   0x00001c30   0x0000002c   Code   RO          254    .text.osRtxThreadListPut  RTX_CM0.lib(rtx_thread.o)
    0x00001c5c   0x00001c5c   0x00000018   Code   RO          260    .text.osRtxThreadListRemove  RTX_CM0.lib(rtx_thread.o)
    0x00001c74   0x00001c74   0x00000026   Code   RO          332    .text.osRtxThreadPostProcess  RTX_CM0.lib(rtx_thread.o)
    0x00001c9a   0x00001c9a   0x00000002   PAD
    0x00001c9c   0x00001c9c   0x00000014   Code   RO          262    .text.osRtxThreadReadyPut  RTX_CM0.lib(rtx_thread.o)
    0x00001cb0   0x00001cb0   0x00000006   Code   RO          266    .text.osRtxThreadRegPtr  RTX_CM0.lib(rtx_thread.o)
    0x00001cb6   0x00001cb6   0x00000002   PAD
    0x00001cb8   0x00001cb8   0x00000028   Code   RO          270    .text.osRtxThreadStackCheck  RTX_CM0.lib(rtx_thread.o)
    0x00001ce0   0x00001ce0   0x00000038   Code   RO          284    .text.osRtxThreadStartup  RTX_CM0.lib(rtx_thread.o)
    0x00001d18   0x00001d18   0x00000014   Code   RO          268    .text.osRtxThreadSwitch  RTX_CM0.lib(rtx_thread.o)
    0x00001d2c   0x00001d2c   0x0000003c   Code   RO          280    .text.osRtxThreadWaitEnter  RTX_CM0.lib(rtx_thread.o)
    0x00001d68   0x00001d68   0x00000022   Code   RO          276    .text.osRtxThreadWaitExit  RTX_CM0.lib(rtx_thread.o)
    0x00001d8a   0x00001d8a   0x00000002   PAD
    0x00001d8c   0x00001d8c   0x00000070   Code   RO          594    .text.osRtxTick_Handler  RTX_CM0.lib(rtx_system.o)
    0x00001dfc   0x00001dfc   0x0000003c   Code   RO          450    .text.osRtxTimerThread  RTX_CM0.lib(rtx_timer.o)
    0x00001e38   0x00001e38   0x00000060   Code   RO          452    .text.osRtxTimerTick  RTX_CM0.lib(rtx_timer.o)
    0x00001e98   0x00001e98   0x0000000c   Code   RO          316    .text.osThreadExit  RTX_CM0.lib(rtx_thread.o)
    0x00001ea4   0x00001ea4   0x00000024   Code   RO          288    .text.osThreadNew   RTX_CM0.lib(rtx_thread.o)
    0x00001ec8   0x00001ec8   0x00000090   Code   RO           99    .text.playEndAudio  audio.o
    0x00001f58   0x00001f58   0x00000020   Code   RO           45    .text.pwm_cal       motorcontrol.o
    0x00001f78   0x00001f78   0x0000001c   Code   RO           61    .text.right         motorcontrol.o
    0x00001f94   0x00001f94   0x0000001c   Code   RO           67    .text.rightBackward  motorcontrol.o
    0x00001fb0   0x00001fb0   0x00000024   Code   RO           65    .text.rightForward  motorcontrol.o
    0x00001fd4   0x00001fd4   0x0000004c   Code   RO           51    .text.rightMotorMove  motorcontrol.o
    0x00002020   0x00002020   0x000000a8   Code   RO           10    .text.run_sound_thread  main.o
    0x000020c8   0x000020c8   0x00000114   Code   RO          127    .text.runningLED    led.o
    0x000021dc   0x000021dc   0x00000018   Code   RO            2    .text.runningLedThread  main.o
    0x000021f4   0x000021f4   0x00000044   Code   RO          113    .text.setLEDOutput  led.o
    0x00002238   0x00002238   0x0000001c   Code   RO           63    .text.stop          motorcontrol.o
    0x00002254   0x00002254   0x00000020   Code   RO          101    .text.stopSound     audio.o
    0x00002274   0x00002274   0x00000012   Code   RO          391    .text.svcRtxDelay   RTX_CM0.lib(rtx_delay.o)
    0x00002286   0x00002286   0x00000032   Code   RO          412    .text.svcRtxEventFlagsClear  RTX_CM0.lib(rtx_evflags.o)
    0x000022b8   0x000022b8   0x00000070   Code   RO          422    .text.svcRtxEventFlagsNew  RTX_CM0.lib(rtx_evflags.o)
    0x00002328   0x00002328   0x0000007c   Code   RO          430    .text.svcRtxEventFlagsSet  RTX_CM0.lib(rtx_evflags.o)
    0x000023a4   0x000023a4   0x00000060   Code   RO          432    .text.svcRtxEventFlagsWait  RTX_CM0.lib(rtx_evflags.o)
    0x00002404   0x00002404   0x00000140   Code   RO          229    .text.svcRtxKernelInitialize  RTX_CM0.lib(rtx_kernel.o)
    0x00002544   0x00002544   0x00000080   Code   RO          231    .text.svcRtxKernelStart  RTX_CM0.lib(rtx_kernel.o)
    0x000025c4   0x000025c4   0x000000e8   Code   RO          679    .text.svcRtxMessageQueueGet  RTX_CM0.lib(rtx_msgqueue.o)
    0x000026ac   0x000026ac   0x000001e4   Code   RO          665    .text.svcRtxMessageQueueNew  RTX_CM0.lib(rtx_msgqueue.o)
    0x00002890   0x00002890   0x000000b8   Code   RO          675    .text.svcRtxMessageQueuePut  RTX_CM0.lib(rtx_msgqueue.o)
    0x00002948   0x00002948   0x0000006c   Code   RO          362    .text.svcRtxThreadExit  RTX_CM0.lib(rtx_thread.o)
    0x000029b4   0x000029b4   0x000001ec   Code   RO          286    .text.svcRtxThreadNew  RTX_CM0.lib(rtx_thread.o)
    0x00002ba0   0x00002ba0   0x0000000e   Code   RO          745    i.__scatterload_copy  mc_p.l(handlers.o)
    0x00002bae   0x00002bae   0x0000000e   Code   RO          747    i.__scatterload_zeroinit  mc_p.l(handlers.o)
    0x00002bbc   0x00002bbc   0x00000068   Data   RO          141    .rodata             rtx_lib.o
    0x00002c24   0x00002c24   0x00000038   Data   RO          144    .rodata             rtx_lib.o
    0x00002c5c   0x00002c5c   0x00000024   Data   RO           25    .rodata.flashled_attr1  main.o
    0x00002c80   0x00002c80   0x00000004   Data   RO          143    .rodata.osRtxUserSVC  rtx_lib.o
    0x00002c84   0x00002c84   0x00000024   Data   RO          138    .rodata.os_idle_thread_attr  rtx_lib.o
    0x00002ca8   0x00002ca8   0x00000018   Data   RO          140    .rodata.os_timer_mq_attr  rtx_lib.o
    0x00002cc0   0x00002cc0   0x00000024   Data   RO          139    .rodata.os_timer_thread_attr  rtx_lib.o
    0x00002ce4   0x00002ce4   0x00000024   Data   RO           23    .rodata.runningled_attr  main.o
    0x00002d08   0x00002d08   0x0000000b   Data   RO          243    .rodata.str1.4      RTX_CM0.lib(rtx_kernel.o)
    0x00002d13   0x00002d13   0x00000001   PAD
    0x00002d14   0x00002d14   0x00000020   Data   RO          744    Region$$Table       anon$$obj.o


    Execution Region ER_RW (Exec base: 0x1ffff000, Load base: 0x00002d34, Size: 0x000003d0, Max: 0xffffffff, ABSOLUTE, COMPRESSED[0x000000c8])

    Exec Addr    Load Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x1ffff000   COMPRESSED   0x00000004   Data   RW          181    .data.SystemCoreClock  system_mkl25z4.o
    0x1ffff004   COMPRESSED   0x00000068   Data   RW          103    .data.end_song      audio.o
    0x1ffff06c   COMPRESSED   0x000000a4   Data   RW          244    .data.os            RTX_CM0.lib(rtx_kernel.o)
    0x1ffff110   COMPRESSED   0x000002c0   Data   RW           30    .data.run_song      main.o


    Execution Region ER_ZI (Exec base: 0x1ffff3d0, Load base: 0x00002dfc, Size: 0x00001870, Max: 0xffffffff, ABSOLUTE)

    Exec Addr    Load Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x1ffff3d0        -       0x00000001   Zero   RW          627    .bss.PendST         RTX_CM0.lib(os_systick.o)
    0x1ffff3d1   0x00002dfc   0x00000003   PAD
    0x1ffff3d4        -       0x00000004   Zero   RW           33    .bss.flagEndingSound  main.o
    0x1ffff3d8        -       0x00000004   Zero   RW           36    .bss.flagFinish     main.o
    0x1ffff3dc        -       0x00000004   Zero   RW           34    .bss.flagRunning    main.o
    0x1ffff3e0        -       0x00000004   Zero   RW           31    .bss.flagRunningSound  main.o
    0x1ffff3e4        -       0x00000004   Zero   RW           35    .bss.flagStation    main.o
    0x1ffff3e8        -       0x00000200   Zero   RW           24    .bss.flashled_stk1  main.o
    0x1ffff5e8        -       0x00001040   Zero   RW          137    .bss.os             rtx_lib.o
    0x20000628        -       0x00000034   Zero   RW          147    .bss.os.msgqueue.cb  rtx_lib.o
    0x2000065c        -       0x00000050   Zero   RW          148    .bss.os.msgqueue.mem  rtx_lib.o
    0x200006ac        -       0x00000088   Zero   RW          145    .bss.os.thread.cb   rtx_lib.o
    0x20000734   0x00002dfc   0x00000004   PAD
    0x20000738        -       0x00000200   Zero   RW          146    .bss.os.thread.stack  rtx_lib.o
    0x20000938        -       0x00000200   Zero   RW           22    .bss.runningled_stk  main.o
    0x20000b38        -       0x00000001   Zero   RW           32    .bss.rx_data        main.o
    0x20000b39   0x00002dfc   0x00000007   PAD
    0x20000b40        -       0x00000100   Zero   RW          164    STACK               startup_mkl25z4.o


==============================================================================

Image component sizes


      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Object Name

       356         28          0        104          0       2684   audio.o
      1392         44          0          0          0       4497   led.o
      1028         88         72        704       1045       6542   main.o
       756        108          0          0          0       3494   motorcontrol.o
        72         20          0          0          0        722   rtx_config.o
         0          0        260          0       4940       5489   rtx_lib.o
       172         40          0          0          0       2233   serial.o
        56         30        192          0        256        876   startup_mkl25z4.o
       568         52          0          4          0       2573   system_mkl25z4.o

    ----------------------------------------------------------------------
      4400        410        556        812       6252      29110   Object Totals
         0          0         32          0          0          0   (incl. Generated)
         0          0          0          0         11          0   (incl. Padding)

    ----------------------------------------------------------------------

      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Library Member Name

       164          8          0          0          0        496   irq_cm0.o
       122         16          0          0          1       2766   os_systick.o
        58          4          0          0          0       2753   rtx_delay.o
       732         20          0          0          0      12348   rtx_evflags.o
       526         24         11        164          0      16105   rtx_kernel.o
       252          0          0          0          0       2564   rtx_memory.o
       166          0          0          0          0      14282   rtx_mempool.o
      1564         40          0          0          0      17889   rtx_msgqueue.o
        68          0          0          0          0       9201   rtx_mutex.o
       340         14          0          0          0       4635   rtx_system.o
      1536         56          0          0          0      30867   rtx_thread.o
       232         20          0          0          0      10018   rtx_timer.o
        86          0          0          0          0          0   __dczerorl2.o
         0          0          0          0          0          0   entry.o
         0          0          0          0          0          0   entry10a.o
         0          0          0          0          0          0   entry11a.o
         8          4          0          0          0          0   entry2.o
         4          0          0          0          0          0   entry5.o
         0          0          0          0          0          0   entry7b.o
         0          0          0          0          0          0   entry8b.o
         8          4          0          0          0          0   entry9a.o
        30          0          0          0          0          0   handlers.o
        80          6          0          0          0         72   idiv_div0.o
        36          8          0          0          0         68   init.o
         0          0          0          0          0          0   iusefp.o
        36          0          0          0          0         60   memcpya.o
        36          0          0          0          0        100   memseta.o
        62          0          0          0          0         72   uidiv_div0.o
       124          0          0          0          0         72   fdiv.o
       130          0          0          0          0        144   fepilogue.o
        50          0          0          0          0         60   ffixi.o
        22          0          0          0          0         68   fflti.o
       122          0          0          0          0         72   fmul.o

    ----------------------------------------------------------------------
      6604        224         12        164          4     124712   Library Totals
        10          0          1          0          3          0   (incl. Padding)

    ----------------------------------------------------------------------

      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Library Name

      5760        202         11        164          1     123924   RTX_CM0.lib
       386         22          0          0          0        372   mc_p.l
       448          0          0          0          0        416   mf_p.l

    ----------------------------------------------------------------------
      6604        224         12        164          4     124712   Library Totals

    ----------------------------------------------------------------------

==============================================================================


      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   

     11004        634        568        976       6256     153406   Grand Totals
     11004        634        568        200       6256     153406   ELF Image Totals (compressed)
     11004        634        568        200          0          0   ROM Totals

==============================================================================

    Total RO  Size (Code + RO Data)                11572 (  11.30kB)
    Total RW  Size (RW Data + ZI Data)              7232 (   7.06kB)
    Total ROM Size (Code + RO Data + RW Data)      11772 (  11.50kB)

==============================================================================

